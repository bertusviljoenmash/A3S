/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using za.co.grindrodbank.a3s.Converters;

namespace za.co.grindrodbank.a3s.A3SApiResources
{ 
    /// <summary>
    /// Represents the current active transients for a single function and it&#39;s relations. 
    /// </summary>
    [DataContract]
    public partial class FunctionTransients : IEquatable<FunctionTransients>
    { 
        /// <summary>
        /// Gets or Sets LatestActiveFunctionTransients
        /// </summary>
        [DataMember(Name="latestActiveFunctionTransients", EmitDefaultValue=false)]
        public List<FunctionBaseFunctionTransient> LatestActiveFunctionTransients { get; set; }

        /// <summary>
        /// A list of the latest transient function permission assignments for this transient role.
        /// </summary>
        /// <value>A list of the latest transient function permission assignments for this transient role.</value>
        [DataMember(Name="latestTransientFunctionPermissions", EmitDefaultValue=false)]
        public List<FunctionPermissionDetailedTransient> LatestTransientFunctionPermissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FunctionTransients {\n");
            sb.Append("  LatestActiveFunctionTransients: ").Append(LatestActiveFunctionTransients).Append("\n");
            sb.Append("  LatestTransientFunctionPermissions: ").Append(LatestTransientFunctionPermissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FunctionTransients)obj);
        }

        /// <summary>
        /// Returns true if FunctionTransients instances are equal
        /// </summary>
        /// <param name="other">Instance of FunctionTransients to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FunctionTransients other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LatestActiveFunctionTransients == other.LatestActiveFunctionTransients ||
                    LatestActiveFunctionTransients != null &&
                    other.LatestActiveFunctionTransients != null &&
                    LatestActiveFunctionTransients.SequenceEqual(other.LatestActiveFunctionTransients)
                ) && 
                (
                    LatestTransientFunctionPermissions == other.LatestTransientFunctionPermissions ||
                    LatestTransientFunctionPermissions != null &&
                    other.LatestTransientFunctionPermissions != null &&
                    LatestTransientFunctionPermissions.SequenceEqual(other.LatestTransientFunctionPermissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LatestActiveFunctionTransients != null)
                    hashCode = hashCode * 59 + LatestActiveFunctionTransients.GetHashCode();
                    if (LatestTransientFunctionPermissions != null)
                    hashCode = hashCode * 59 + LatestTransientFunctionPermissions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FunctionTransients left, FunctionTransients right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FunctionTransients left, FunctionTransients right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
