/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using za.co.grindrodbank.a3s.Converters;

namespace za.co.grindrodbank.a3s.A3SApiResources
{ 
    /// <summary>
    /// Represents a transient state of an actual function record, excluding any transient relations. 
    /// </summary>
    [DataContract]
    public partial class FunctionBaseFunctionTransient : IEquatable<FunctionBaseFunctionTransient>
    { 
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// Gets or Sets FunctionId
        /// </summary>
        [DataMember(Name="functionId", EmitDefaultValue=false)]
        public Guid FunctionId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RState
        /// </summary>
        [DataMember(Name="r_state", EmitDefaultValue=false)]
        public string RState { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// The current approval count.
        /// </summary>
        /// <value>The current approval count.</value>
        [DataMember(Name="approvalCount", EmitDefaultValue=false)]
        public int ApprovalCount { get; set; }

        /// <summary>
        /// The required approval count before this entity is released.
        /// </summary>
        /// <value>The required approval count before this entity is released.</value>
        [DataMember(Name="requiredApprovalCount", EmitDefaultValue=false)]
        public int RequiredApprovalCount { get; set; }

        /// <summary>
        /// The UUID of the user who created this transient state record.
        /// </summary>
        /// <value>The UUID of the user who created this transient state record.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public Guid CreatedBy { get; set; }

        /// <summary>
        /// The date that this transient state was created.
        /// </summary>
        /// <value>The date that this transient state was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FunctionBaseFunctionTransient {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  FunctionId: ").Append(FunctionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RState: ").Append(RState).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ApprovalCount: ").Append(ApprovalCount).Append("\n");
            sb.Append("  RequiredApprovalCount: ").Append(RequiredApprovalCount).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FunctionBaseFunctionTransient)obj);
        }

        /// <summary>
        /// Returns true if FunctionBaseFunctionTransient instances are equal
        /// </summary>
        /// <param name="other">Instance of FunctionBaseFunctionTransient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FunctionBaseFunctionTransient other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    FunctionId == other.FunctionId ||
                    FunctionId != null &&
                    FunctionId.Equals(other.FunctionId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RState == other.RState ||
                    RState != null &&
                    RState.Equals(other.RState)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    ApprovalCount == other.ApprovalCount ||
                    
                    ApprovalCount.Equals(other.ApprovalCount)
                ) && 
                (
                    RequiredApprovalCount == other.RequiredApprovalCount ||
                    
                    RequiredApprovalCount.Equals(other.RequiredApprovalCount)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (FunctionId != null)
                    hashCode = hashCode * 59 + FunctionId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RState != null)
                    hashCode = hashCode * 59 + RState.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovalCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiredApprovalCount.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FunctionBaseFunctionTransient left, FunctionBaseFunctionTransient right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FunctionBaseFunctionTransient left, FunctionBaseFunctionTransient right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
