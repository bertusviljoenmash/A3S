/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using za.co.grindrodbank.a3s.Converters;

namespace za.co.grindrodbank.a3s.A3SApiResources
{ 
    /// <summary>
    /// Represents a collection of all the entities within the system that are currently being modified. Response may include only the transients for certain requested entity types. 
    /// </summary>
    [DataContract]
    public partial class SystemTransients : IEquatable<SystemTransients>
    { 
        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<SystemTransientsRole> Roles { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<SystemTransientsTeam> Teams { get; set; }

        /// <summary>
        /// Gets or Sets Functions
        /// </summary>
        [DataMember(Name="functions", EmitDefaultValue=false)]
        public List<SystemTransientsFunction> Functions { get; set; }

        /// <summary>
        /// Gets or Sets LdapAuthenticationModes
        /// </summary>
        [DataMember(Name="LdapAuthenticationModes", EmitDefaultValue=false)]
        public List<SystemTransientsLdapAuthenticationMode> LdapAuthenticationModes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemTransients {\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  LdapAuthenticationModes: ").Append(LdapAuthenticationModes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SystemTransients)obj);
        }

        /// <summary>
        /// Returns true if SystemTransients instances are equal
        /// </summary>
        /// <param name="other">Instance of SystemTransients to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemTransients other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    other.Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    Teams == other.Teams ||
                    Teams != null &&
                    other.Teams != null &&
                    Teams.SequenceEqual(other.Teams)
                ) && 
                (
                    Functions == other.Functions ||
                    Functions != null &&
                    other.Functions != null &&
                    Functions.SequenceEqual(other.Functions)
                ) && 
                (
                    LdapAuthenticationModes == other.LdapAuthenticationModes ||
                    LdapAuthenticationModes != null &&
                    other.LdapAuthenticationModes != null &&
                    LdapAuthenticationModes.SequenceEqual(other.LdapAuthenticationModes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                    if (Teams != null)
                    hashCode = hashCode * 59 + Teams.GetHashCode();
                    if (Functions != null)
                    hashCode = hashCode * 59 + Functions.GetHashCode();
                    if (LdapAuthenticationModes != null)
                    hashCode = hashCode * 59 + LdapAuthenticationModes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SystemTransients left, SystemTransients right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemTransients left, SystemTransients right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
