/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using za.co.grindrodbank.a3s.Converters;

namespace za.co.grindrodbank.a3s.A3SApiResources
{ 
    /// <summary>
    /// Represents the current active transients for a user and it&#39;s relations. 
    /// </summary>
    [DataContract]
    public partial class UserTransients : IEquatable<UserTransients>
    { 
        /// <summary>
        /// A list of the latest transient base user records for this transient user.
        /// </summary>
        /// <value>A list of the latest transient base user records for this transient user.</value>
        [DataMember(Name="latestActiveUserTransients", EmitDefaultValue=false)]
        public List<UserBaseUserTransient> LatestActiveUserTransients { get; set; }

        /// <summary>
        /// A list of the latest transient user - roles assignments for this transient user.
        /// </summary>
        /// <value>A list of the latest transient user - roles assignments for this transient user.</value>
        [DataMember(Name="latestTransientUserRoles", EmitDefaultValue=false)]
        public List<UserRoleDetailedTransient> LatestTransientUserRoles { get; set; }

        /// <summary>
        /// A list of the latest transient user - team assignments for this transient user.
        /// </summary>
        /// <value>A list of the latest transient user - team assignments for this transient user.</value>
        [DataMember(Name="latestTransientUserTeams", EmitDefaultValue=false)]
        public List<UserTeamDetailedTransient> LatestTransientUserTeams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTransients {\n");
            sb.Append("  LatestActiveUserTransients: ").Append(LatestActiveUserTransients).Append("\n");
            sb.Append("  LatestTransientUserRoles: ").Append(LatestTransientUserRoles).Append("\n");
            sb.Append("  LatestTransientUserTeams: ").Append(LatestTransientUserTeams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserTransients)obj);
        }

        /// <summary>
        /// Returns true if UserTransients instances are equal
        /// </summary>
        /// <param name="other">Instance of UserTransients to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTransients other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LatestActiveUserTransients == other.LatestActiveUserTransients ||
                    LatestActiveUserTransients != null &&
                    other.LatestActiveUserTransients != null &&
                    LatestActiveUserTransients.SequenceEqual(other.LatestActiveUserTransients)
                ) && 
                (
                    LatestTransientUserRoles == other.LatestTransientUserRoles ||
                    LatestTransientUserRoles != null &&
                    other.LatestTransientUserRoles != null &&
                    LatestTransientUserRoles.SequenceEqual(other.LatestTransientUserRoles)
                ) && 
                (
                    LatestTransientUserTeams == other.LatestTransientUserTeams ||
                    LatestTransientUserTeams != null &&
                    other.LatestTransientUserTeams != null &&
                    LatestTransientUserTeams.SequenceEqual(other.LatestTransientUserTeams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LatestActiveUserTransients != null)
                    hashCode = hashCode * 59 + LatestActiveUserTransients.GetHashCode();
                    if (LatestTransientUserRoles != null)
                    hashCode = hashCode * 59 + LatestTransientUserRoles.GetHashCode();
                    if (LatestTransientUserTeams != null)
                    hashCode = hashCode * 59 + LatestTransientUserTeams.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserTransients left, UserTransients right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserTransients left, UserTransients right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
