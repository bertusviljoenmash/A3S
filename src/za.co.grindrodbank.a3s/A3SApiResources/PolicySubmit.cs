/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for the A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 1.0.5
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using za.co.grindrodbank.a3s.Converters;

namespace za.co.grindrodbank.a3s.A3SApiResources
{ 
    /// <summary>
    /// Create or update a policy 
    /// </summary>
    [DataContract]
    public partial class PolicySubmit : IEquatable<PolicySubmit>
    { 
        /// <summary>
        /// Gets or Sets Value1
        /// </summary>
        [DataMember(Name="value1", EmitDefaultValue=false)]
        public string Value1 { get; set; }

        /// <summary>
        /// Gets or Sets Value2
        /// </summary>
        [DataMember(Name="value2", EmitDefaultValue=false)]
        public string Value2 { get; set; }

        /// <summary>
        /// Gets or Sets Value3
        /// </summary>
        [DataMember(Name="value3", EmitDefaultValue=false)]
        public string Value3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicySubmit {\n");
            sb.Append("  Value1: ").Append(Value1).Append("\n");
            sb.Append("  Value2: ").Append(Value2).Append("\n");
            sb.Append("  Value3: ").Append(Value3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicySubmit)obj);
        }

        /// <summary>
        /// Returns true if PolicySubmit instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicySubmit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicySubmit other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Value1 == other.Value1 ||
                    Value1 != null &&
                    Value1.Equals(other.Value1)
                ) && 
                (
                    Value2 == other.Value2 ||
                    Value2 != null &&
                    Value2.Equals(other.Value2)
                ) && 
                (
                    Value3 == other.Value3 ||
                    Value3 != null &&
                    Value3.Equals(other.Value3)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Value1 != null)
                    hashCode = hashCode * 59 + Value1.GetHashCode();
                    if (Value2 != null)
                    hashCode = hashCode * 59 + Value2.GetHashCode();
                    if (Value3 != null)
                    hashCode = hashCode * 59 + Value3.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicySubmit left, PolicySubmit right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicySubmit left, PolicySubmit right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
