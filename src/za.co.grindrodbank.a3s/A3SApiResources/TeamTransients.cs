/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using za.co.grindrodbank.a3s.Converters;

namespace za.co.grindrodbank.a3s.A3SApiResources
{ 
    /// <summary>
    /// Represents the current active transients for a team and it&#39;s relations. 
    /// </summary>
    [DataContract]
    public partial class TeamTransients : IEquatable<TeamTransients>
    { 
        /// <summary>
        /// A list of the latest active (since last decline or released state) transient base team records for this team.
        /// </summary>
        /// <value>A list of the latest active (since last decline or released state) transient base team records for this team.</value>
        [DataMember(Name="latestActiveTeamTransients", EmitDefaultValue=false)]
        public List<TeamBaseTeamTransient> LatestActiveTeamTransients { get; set; }

        /// <summary>
        /// A list of the latest active (since last decline or released state) transient data policy assignment changes for this team.
        /// </summary>
        /// <value>A list of the latest active (since last decline or released state) transient data policy assignment changes for this team.</value>
        [DataMember(Name="latestTransientTeamDataPolicies", EmitDefaultValue=false)]
        public List<TeamDataPolicyDetailedTransient> LatestTransientTeamDataPolicies { get; set; }

        /// <summary>
        /// A list of the latest active (since last decline or released state) transient child team assignment changes for this team.
        /// </summary>
        /// <value>A list of the latest active (since last decline or released state) transient child team assignment changes for this team.</value>
        [DataMember(Name="latestTransientRoleChildRoles", EmitDefaultValue=false)]
        public List<TeamChildTeamDetailedTransient> LatestTransientRoleChildRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamTransients {\n");
            sb.Append("  LatestActiveTeamTransients: ").Append(LatestActiveTeamTransients).Append("\n");
            sb.Append("  LatestTransientTeamDataPolicies: ").Append(LatestTransientTeamDataPolicies).Append("\n");
            sb.Append("  LatestTransientRoleChildRoles: ").Append(LatestTransientRoleChildRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TeamTransients)obj);
        }

        /// <summary>
        /// Returns true if TeamTransients instances are equal
        /// </summary>
        /// <param name="other">Instance of TeamTransients to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamTransients other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LatestActiveTeamTransients == other.LatestActiveTeamTransients ||
                    LatestActiveTeamTransients != null &&
                    other.LatestActiveTeamTransients != null &&
                    LatestActiveTeamTransients.SequenceEqual(other.LatestActiveTeamTransients)
                ) && 
                (
                    LatestTransientTeamDataPolicies == other.LatestTransientTeamDataPolicies ||
                    LatestTransientTeamDataPolicies != null &&
                    other.LatestTransientTeamDataPolicies != null &&
                    LatestTransientTeamDataPolicies.SequenceEqual(other.LatestTransientTeamDataPolicies)
                ) && 
                (
                    LatestTransientRoleChildRoles == other.LatestTransientRoleChildRoles ||
                    LatestTransientRoleChildRoles != null &&
                    other.LatestTransientRoleChildRoles != null &&
                    LatestTransientRoleChildRoles.SequenceEqual(other.LatestTransientRoleChildRoles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LatestActiveTeamTransients != null)
                    hashCode = hashCode * 59 + LatestActiveTeamTransients.GetHashCode();
                    if (LatestTransientTeamDataPolicies != null)
                    hashCode = hashCode * 59 + LatestTransientTeamDataPolicies.GetHashCode();
                    if (LatestTransientRoleChildRoles != null)
                    hashCode = hashCode * 59 + LatestTransientRoleChildRoles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TeamTransients left, TeamTransients right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TeamTransients left, TeamTransients right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
