/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using za.co.grindrodbank.a3s.Attributes;
using Microsoft.AspNetCore.Authorization;
using za.co.grindrodbank.a3s.A3SApiResources;

namespace za.co.grindrodbank.a3s.AbstractApiControllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RoleApiController : ControllerBase
    { 
        /// <summary>
        /// Approves the creation of a role or change to a role.
        /// </summary>
        /// <remarks>Approves a role by its Id.</remarks>
        /// <param name="roleId">The Id of the role.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to approve a role.</response>
        /// <response code="404">Role related entity not found.</response>
        /// <response code="422">Non-Processible Entity. The request was correctly structured, but some business rules were violated, preventing the approval of the role.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPatch]
        [Route("/roles/{roleId}/approve", Name = "ApproveRole")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RoleTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> ApproveRoleAsync([FromRoute][Required]Guid roleId);

        /// <summary>
        /// Create a Role.
        /// </summary>
        /// <remarks>Create a new Role.</remarks>
        /// <param name="roleSubmit"></param>
        /// <response code="200">Successful. Role created.</response>
        /// <response code="400">Invalid parameters.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - Not authorized to create a Role.</response>
        /// <response code="404">Role related entity not found.</response>
        /// <response code="422">Non-Processible Entity. The request was correctly structured, but some business rules were violated, preventing the creation of the role.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPost]
        [Route("/roles", Name = "CreateRole")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RoleTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> CreateRoleAsync([FromBody]RoleSubmit roleSubmit);

        /// <summary>
        /// Declines the creation of role or a change to a role.
        /// </summary>
        /// <remarks>Approves a role by its Id.</remarks>
        /// <param name="roleId">The Id of the role.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to approve a role.</response>
        /// <response code="404">Role related entity not found.</response>
        /// <response code="422">Non-Processible Entity. The request was correctly structured, but some business rules were violated, preventing the approval of the role.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPatch]
        [Route("/roles/{roleId}/decline", Name = "DeclineRole")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RoleTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> DeclineRoleAsync([FromRoute][Required]Guid roleId);

        /// <summary>
        /// Deletes a role.
        /// </summary>
        /// <remarks>Get a role by its UUID.</remarks>
        /// <param name="roleId">The UUID of the role.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access this role.</response>
        /// <response code="404">Role not found.</response>
        /// <response code="500">An unexpected error occurred</response>
        [HttpDelete]
        [Route("/roles/{roleId}", Name = "DeleteRole")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RoleTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> DeleteRoleAsync([FromRoute][Required]Guid roleId);

        /// <summary>
        /// Get a role.
        /// </summary>
        /// <remarks>Get a role by its UUID.</remarks>
        /// <param name="roleId">The UUID of the role.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access this role.</response>
        /// <response code="404">Role not found.</response>
        /// <response code="500">An unexpected error occurred</response>
        [HttpGet]
        [Route("/roles/{roleId}", Name = "GetRole")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Role))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> GetRoleAsync([FromRoute][Required]Guid roleId);

        /// <summary>
        /// Get a role&#39;s transient states.
        /// </summary>
        /// <remarks>Get the transient records for a role by the role UUID.</remarks>
        /// <param name="roleId">The UUID of the role.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access this role.</response>
        /// <response code="404">Role not found.</response>
        /// <response code="500">An unexpected error occurred</response>
        [HttpGet]
        [Route("/roles/{roleId}/transients", Name = "GetRoleTransients")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RoleTransients))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> GetRoleTransientsAsync([FromRoute][Required]Guid roleId);

        /// <summary>
        /// Search for Roles.
        /// </summary>
        /// <remarks>Search for Roles.</remarks>
        /// <param name="includeRelations">Determines whether the entities related to the role are returned.</param>
        /// <param name="page">The page to view.</param>
        /// <param name="size">The size of a page.</param>
        /// <param name="filterName">A search query filter on the role&#39;s name.</param>
        /// <param name="orderBy">a comma separated list of fields in their sort order. Ascending order is assumed. Append &#39;_desc&#39; after a field to indicate descending order. Supported fields. &#39;name&#39;.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access the list of roles.</response>
        /// <response code="404">Roles list not found.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpGet]
        [Route("/roles", Name = "ListRoles")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Role>))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> ListRolesAsync([FromQuery]bool includeRelations, [FromQuery]int page, [FromQuery][Range(1, 20)]int size, [FromQuery][StringLength(255, MinimumLength=0)]string filterName, [FromQuery]string orderBy);

        /// <summary>
        /// Captures an update to a role.
        /// </summary>
        /// <remarks>Update a role by its UUID.</remarks>
        /// <param name="roleId">The UUID of the role.</param>
        /// <param name="roleSubmit"></param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to update a role.</response>
        /// <response code="404">Role related entity not found.</response>
        /// <response code="422">Non-Processible Entity. The request was correctly structured, but some business rules were violated, preventing the updating of the role.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPut]
        [Route("/roles/{roleId}", Name = "UpdateRole")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RoleTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> UpdateRoleAsync([FromRoute][Required]Guid roleId, [FromBody]RoleSubmit roleSubmit);
    }
}
