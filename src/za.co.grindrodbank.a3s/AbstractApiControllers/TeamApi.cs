/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 1.1.6
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using za.co.grindrodbank.a3s.Attributes;
using Microsoft.AspNetCore.Authorization;
using za.co.grindrodbank.a3s.A3SApiResources;

namespace za.co.grindrodbank.a3s.AbstractApiControllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class TeamApiController : ControllerBase
    { 
        /// <summary>
        /// Approve all current transient states for a team.
        /// </summary>
        /// <remarks>Approve all current transient states for a team, given the team&#39;s UUID.</remarks>
        /// <param name="teamId">The UUID of the team.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to update the team.</response>
        /// <response code="404">Teams not found.</response>
        /// <response code="422">Non-Processible Entity - The requests was correctly structured, but some business rules were violated, preventing the update.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPatch]
        [Route("/teams/{teamId}/approve", Name = "ApproveTeam")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(TeamTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> ApproveTeamAsync([FromRoute][Required]Guid teamId);

        /// <summary>
        /// Creates a new team.
        /// </summary>
        /// <remarks>Create a new team.</remarks>
        /// <param name="teamSubmit"></param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to create the team.</response>
        /// <response code="404">Team related entity not found.</response>
        /// <response code="422">Non-Processible Entity. The request was correctly structured, but some business rules were violated, preventing the creation of the team.</response>
        /// <response code="500">An unexpected error occurred</response>
        [HttpPost]
        [Route("/teams", Name = "CreateTeam")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Team))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> CreateTeamAsync([FromBody]TeamSubmit teamSubmit);

        /// <summary>
        /// Decline all current transient states for a team.
        /// </summary>
        /// <remarks>Decline all current transient states for a team, given the team&#39;s UUID.</remarks>
        /// <param name="teamId">The UUID of the team.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to update the team.</response>
        /// <response code="404">Teams not found.</response>
        /// <response code="422">Non-Processible Entity - The requests was correctly structured, but some business rules were violated, preventing the update.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPatch]
        [Route("/teams/{teamId}/decline", Name = "DeclineTeam")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(TeamTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> DeclineTeamAsync([FromRoute][Required]Guid teamId);

        /// <summary>
        /// Delete a team.
        /// </summary>
        /// <remarks>Deletes a team by it&#39;s UUID.</remarks>
        /// <param name="teamId">The UUID of the team.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to update the team.</response>
        /// <response code="404">Teams not found.</response>
        /// <response code="422">Non-Processible Entity - The requests was correctly structured, but some business rules were violated, preventing the update.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpDelete]
        [Route("/teams/{teamId}", Name = "DeleteTeam")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(TeamTransient))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> DeleteTeamAsync([FromRoute][Required]Guid teamId);

        /// <summary>
        /// Get a team.
        /// </summary>
        /// <remarks>Get a team by its UUID.</remarks>
        /// <param name="teamId">team</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access the team.</response>
        /// <response code="404">Team not found.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpGet]
        [Route("/teams/{teamId}", Name = "GetTeam")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Team))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> GetTeamAsync([FromRoute][Required]Guid teamId);

        /// <summary>
        /// Get the current active (all transients since last declined or released state) for a team and it&#39;s relations.
        /// </summary>
        /// <remarks>Get the latest transients for a team by the team&#39;s UUID.</remarks>
        /// <param name="teamId">team</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access the team.</response>
        /// <response code="404">Team not found.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpGet]
        [Route("/teams/{teamId}/transients", Name = "GetTeamTransients")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(TeamTransients))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> GetTeamTransientsAsync([FromRoute][Required]Guid teamId);

        /// <summary>
        /// Search for teams.
        /// </summary>
        /// <remarks>Search for teams.</remarks>
        /// <param name="includeRelations">Determines whether the team&#39;s related entities will be returned.</param>
        /// <param name="page">The page to view.</param>
        /// <param name="size">The size of a page.</param>
        /// <param name="filterName">A search query filter on the team&#39;s name.</param>
        /// <param name="orderBy">a comma separated list of fields in their sort order. Ascending order is assumed. Append &#39;_desc&#39; after a field to indicate descending order. Supported fields. &#39;name&#39;.</param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access the list of teams.</response>
        /// <response code="404">Teams list not found.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpGet]
        [Route("/teams", Name = "ListTeams")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Team>))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> ListTeamsAsync([FromQuery]bool includeRelations, [FromQuery]int page, [FromQuery][Range(1, 20)]int size, [FromQuery][StringLength(255, MinimumLength=0)]string filterName, [FromQuery]string orderBy);

        /// <summary>
        /// Update a team.
        /// </summary>
        /// <remarks>Update a team by its UUID.</remarks>
        /// <param name="teamId">The UUID of the team.</param>
        /// <param name="teamSubmit"></param>
        /// <response code="200">OK.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to update the team.</response>
        /// <response code="404">Teams not found.</response>
        /// <response code="422">Non-Processible Entity - The requests was correctly structured, but some business rules were violated, preventing the update.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPut]
        [Route("/teams/{teamId}", Name = "UpdateTeam")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Team))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> UpdateTeamAsync([FromRoute][Required]Guid teamId, [FromBody]TeamSubmit teamSubmit);
    }
}
