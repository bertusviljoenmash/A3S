/**
 * *************************************************
 * Copyright (c) 2020, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 2.0.0-alpha-1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using za.co.grindrodbank.a3s.Attributes;
using Microsoft.AspNetCore.Authorization;
using za.co.grindrodbank.a3s.A3SApiResources;

namespace za.co.grindrodbank.a3s.AbstractApiControllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class TwoFactorAuthApiController : ControllerBase
    { 
        /// <summary>
        /// Removes two-factor authentication for a user, as well as any registered devices and methods.
        /// </summary>
        /// <remarks>Removes two-factor authentication for a user.</remarks>
        /// <param name="userId">The UUID of the user.</param>
        /// <response code="204">No Content.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to remove two-factor authentication.</response>
        /// <response code="404">User not found.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpDelete]
        [Route("/twoFactorAuth/users/{userId}", Name = "RemoveTwoFactorAuthentication")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> RemoveTwoFactorAuthenticationAsync([FromRoute][Required]Guid userId);

        /// <summary>
        /// Validates a two-factor authenticator OTP.
        /// </summary>
        /// <remarks>Validates a two-factor authenticator OTP.</remarks>
        /// <param name="twoFactorAuthOTP"></param>
        /// <response code="200">Successful. OTP validation ran successfully. Check Success parameter and results for more information.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to validate two-factor authentication OTP&#39;s.</response>
        /// <response code="404">User not found.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPost]
        [Route("/twoFactorAuth/validate", Name = "ValidateTwoFactorAuthenticationOTP")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ValidationResultResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> ValidateTwoFactorAuthenticationOTPAsync([FromBody]TwoFactorAuthOTP twoFactorAuthOTP);
    }
}
