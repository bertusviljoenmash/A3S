{
	"info": {
		"_postman_id": "077a903b-a911-4bcc-8689-98c778ceda02",
		"name": "A3S - Integration - Transients",
		"description": "The A3S integration Postman collection designed for an A3S that implements and checks transients states of entities.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Access Tokens + Initial Security Contract Copy",
			"item": [
				{
					"name": "Get Access Token - A3S Admin - Not Authed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request (Not-Authed)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData).to.have.property('error_description');",
									"    pm.expect(jsonData.error_description).to.eql(\"invalid_username_or_password\");",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "Get Access Token - A3S Bootsrap Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-bootstrap-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-yaml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# A3S Security Contract\n#\n# This file contains information allowing for configuration and declaration of almost all aspects of A3S.\n# More information at: https://github.com/GrindrodBank/A3S/blob/master/doc/security-contracts.md\n#\nname: A3S Security Contract\ngenerated: 2019-10-30 10:00:00 +02:00\napplications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s   \n    applicationFunctions:\n      - name: a3s.users\n        description: Functionality to maintain users within the A3S User store.\n        permissions:\n          - name: a3s.users.read\n            description: View a list of users or a single user.\n          - name: a3s.users.create\n            description: Create a new user. Enables assigning roles to newly created users.\n          - name: a3s.users.delete\n            description: Removes a user, but only from the A3S User store.\n          - name: a3s.users.update\n            description: Updates a user. Also enables modifying roles assigned to the user.\n\n      - name: a3s.teams\n        description: Functionality to maintain teams.\n        permissions:\n          - name: a3s.teams.read\n            description: View list of teams. View a single team.\n          - name: a3s.teams.create\n            description: Create a new team. Grants ability to assign users to this team.\n          - name: a3s.teams.delete\n            description: Remove a team.\n          - name: a3s.teams.update\n            description: Update a team. Change which users are assigned to the team.\n\n      - name: a3s.roles\n        description: Functionality to manage roles and the functions assigned to roles.\n        permissions:\n          - name: a3s.roles.read\n            description: Enables reading lists of roles and individual roles.\n          - name: a3s.roles.create\n            description: Enables creation of roles. Enables assignment of functions to the created role.\n          - name: a3s.roles.delete\n            description: Enables deletion of a role.\n          - name: a3s.roles.update\n            description: Enables updating of a role. Enables updating of functions assinged to a role.\n\n      - name: a3s.applications\n        description: Functionality to manage applications within A3S.\n        permissions:\n          - name: a3s.applications.read\n            description: Enables reading lists of applications and individual applications. Enables viewing which functions and permissions are assigned to applications.\n\n      - name: a3s.clients\n        description: Functionality to manage clients within A3S.\n        permissions:\n          - name: a3s.clients.read\n            description: Enables reading lists of clients and individual clients.\n\n      - name: a3s.functions\n        description: Functionality to manage functions created by micro-services.\n        permissions:\n          - name: a3s.functions.read\n            description: Enables reading lists of functions, individual functions and the lists of permissions assigned to functions.\n          - name: a3s.functions.create\n            description: Enables the creation of new functions and the assignment of permissions to these functions.\n          - name: a3s.functions.update\n            description: Enables the updating of existing functions. Enables editing the permissions that are assigned to a function.\n          - name: a3s.functions.delete\n            description: Enables the deletion of functions.\n\n      - name: a3s.authenticationModes\n        description: Functionality to maintain authentication modes.\n        permissions:\n          - name: a3s.ldapAuthenticationModes.read\n            description: View list of authentication modes. View a single authentication mode.\n          - name: a3s.ldapAuthenticationModes.create\n            description: Create a new authentication mode.\n          - name: a3s.ldapAuthenticationModes.delete\n            description: Remove an authentication mode.\n          - name: a3s.ldapAuthenticationModes.update\n            description: Update an authentication mode.\n\n      - name: a3s.applicationFunctions\n        description: Functionality to manage application functions created by micro-services.\n        permissions:\n          - name: a3s.applicationFunctions.read\n            description: Enables reading lists of application functions, individual application functions and the lists of permissions assigned to application functions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove applications functions directly via the API is prohibited. These operations are only permitted in the context of security contract application (this document).\n            \n      - name: a3s.permissions\n        description: Functionality to manage permissions created by micro-services.\n        permissions:\n          - name: a3s.permissions.read\n            description: Enables reading lists of permissions and individual permissions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove permissions directly via the API is prohibited. These operations are only permitted in the context of security contract application.\n      - name: a3s.securityContracts\n        description: Functionality to apply security contracts for micro-services.\n        permissions:\n          - name: a3s.securityContracts.read\n            description: Enables fetching of a security contract definition.\n          - name: a3s.securityContracts.update\n            description: Enables idempotently applying (creating or updating) a security contract definition. This includes creation or updating of permissions, functions, applications and the relationships between them.\n\n      - name: a3s.clientRegistration\n        description: Functionality to create and update Oauth2.0 and Openid Connect clients.\n        permissions:\n          - name: a3s.clientRegistration.update\n            description: Enables idempotently applying (creating or updating) a client definition.\n\n      - name: a3s.twoFactorAuth\n        description: Functionality to update two-factor authentication configuration.\n        permissions:\n          - name: a3s.twoFactorAuth.remove\n            description: Removes two-factor authentication from a user profile.\n          - name: a3s.twoFactorAuth.validateOtp\n            description: Validates a user authenticator generated OTP.\n\n      - name: a3s.termsOfService\n        description: Functionality to manage terms of service entries.\n        permissions:\n          - name: a3s.termsOfService.read\n            description: Enables reading lists or individual entries of terms of service.\n          - name: a3s.termsOfService.create\n            description: Enables the creation of new terms of service entries.\n          - name: a3s.termsOfService.delete\n            description: Enables the delete of existing terms of service entries.\n\n    dataPolicies:\n      - name: a3s.viewYourTeamsOnly\n        description: Will only return teams that the accessing user is part of when retrieving lists of teams from the API\n\nclients:\n  - clientId: test-client-api\n    name: \"Test client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n\n\ndefaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S Default configuration\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.teams.read\n              - a3s.teams.create\n              - a3s.teams.update\n              - a3s.teams.delete\n              - a3s.roles.read\n              - a3s.roles.create\n              - a3s.roles.update\n              - a3s.roles.delete\n              - a3s.applications.read\n              - a3s.clients.read\n              - a3s.functions.read\n              - a3s.functions.create\n              - a3s.functions.update\n              - a3s.functions.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.applicationFunctions.read\n              - a3s.permissions.read\n              - a3s.securityContracts.update\n              - a3s.securityContracts.read\n              - a3s.clientRegistration.update\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n              - a3s.termsOfService.create\n              - a3s.termsOfService.delete\n              - a3s.termsOfService.read\n          - name: \"a3s.userMaintenance\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n          - name: \"a3s.securityContractMaintenance\"\n            description: \"Functionality to apply security contracts for micro-services.\"\n            permissions:\n              - a3s.securityContracts.read\n              - a3s.securityContracts.update\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Super Admin\"\n        description: An A3S Role that has all the A3S functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Role for managing users.\n        functions:\n          - \"a3s.userMaintenance\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-admin\n        name: a3s-admin\n        surname: system user\n        email: a3s-admin@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110110\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Super Admin\"\n      - username: a3s-admin2\n        name: a3s-admin2\n        surname: system user 2\n        email: a3s-admin2@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110115\"\n        roles:\n          - \"A3S Super Admin\"\n      - username: a3s-user1\n        name: a3s user 1\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user1@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n      - username: a3s-user2\n        name: a3s user 2\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user2@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n\n    teams:\n      - name: default-team\n        description: A simple test default team.\n        users:\n          - a3s-admin\n          - a3s-user1\n      - name: default-team-with-data-policies\n        description: A simple test default team with data policies.\n        users:\n          - a3s-user2\n        dataPolicies:\n          - a3s.viewYourTeamsOnly\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Token - A3S Admin - Authed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Response is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				}
			],
			"description": "Some tests pertaining to applying a security contract. Also some tests for ensuring users are created via the security contract.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Functions",
			"item": [
				{
					"name": "GetFunctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a list containing the three functions defined within the security contract was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Check that the first element of the list is a correctly structured function\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0]).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that the first element of the list is a function with correctly structured associated permissions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment function UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"function-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions?includeRelations=true",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							],
							"query": [
								{
									"key": "includeRelations",
									"value": "true"
								}
							]
						},
						"description": "Gets a list of functions from the API. Three were expected to be created with the earlier application of the security contract. Three element list is expected."
					},
					"response": []
				}
			],
			"description": "Stores all the collections for testing the functions APIs.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Basic Roles Get Tests",
					"item": [
						{
							"name": "GetRoles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that roles are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('roles');",
											"    pm.expect(jsonData[0]).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Set environment role UUID to UUID of first element of retrieved list.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData[0].uuid);",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a list of roles from the API."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"    pm.expect(jsonData).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Non UUID  ID - Expect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}fail",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}fail"
									]
								},
								"description": "Gets a role by a UUID that is invalid in structure. Expects a 400 bad request return."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Non Existent UUID - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/1f42d750-8ea3-4007-8a7c-41a8822e2099",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"1f42d750-8ea3-4007-8a7c-41a8822e2099"
									]
								},
								"description": "Gets a role using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Zero UUID  ID - Expect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"00000000-0000-0000-0000-000000000000"
									]
								},
								"description": "Gets a role by a UUID that is invalid in structure. Expects a 400 bad request return."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - No Functions - No Child Roles",
					"item": [
						{
							"name": "CreateRole - No Functions - No Children - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"    pm.environment.set(\"child-role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 55\",\n    \"description\": \"Test new role description 55\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role Not Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Same Approver - Expect 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states, but using an approver that has already approved the changes, which should result in a 422."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin2",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role now released",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"    pm.expect(jsonData).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.functions.length).to.eql(0);",
											"    pm.expect(jsonData.roles.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						}
					],
					"description": "Create and approve a new role that has no assigned functions or child roles.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - 1 Function Added - 1 Child Role",
					"item": [
						{
							"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 56\",\n    \"description\": \"Test new role description 56\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role Not Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role now released",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"    pm.expect(jsonData).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.functions.length).to.eql(1);",
											"    pm.expect(jsonData.functions[0].uuid).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.roles.length).to.eql(1);",
											"    pm.expect(jsonData.roles[0].uuid).to.eql(pm.environment.get('child-role-guid'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Row - Approve Twice - Expect Role Deleted",
					"item": [
						{
							"name": "DeleteRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5e2269-c2d9-4e89-9e77-84928d020ed3",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID. In order to find a UUID for a role, run the 'GetRoles' function to obtain a list of all roles from the API. Select the UUID field of a desired role, and set it as the value of the 'role-guid' within the Postman environment variable. This function references the value of that environment variable as it's Role UUID."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin2",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - 1 Function Added - 1 Child Role - Decline",
					"item": [
						{
							"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 57\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 57\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 57\",\n    \"description\": \"Test new role description 57\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role Not Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 57\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 57\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "DeclineRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 57\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 57\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Declined\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Declined\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Declined\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/decline",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"decline"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Already Declined - Expect 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422 - Not Processable\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99a787b7-1790-4693-925e-931cd0e21d01",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "382eaaf9-18f0-464f-83a0-fdf373ae9c78",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - Approve Twice - Same Approver - Expect 422",
					"item": [
						{
							"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 56\",\n    \"description\": \"Test new role description 56\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Expect 200 with transient role returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Expect 422 - Duplicate approver error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						}
					],
					"description": "Distinct approvers are required for approving any changes to an entity and it's relations. If the same approver attempts to approve the same change set, an error should be thrown.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - Approve Once - Same User Declines - Expect 422",
					"item": [
						{
							"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 58\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 58\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 58\",\n    \"description\": \"Test new role description 58\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Expect 200 with transient role returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 58\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 58\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "DeclineRole - Expect 422 - Approver cannot decline error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/decline",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"decline"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						}
					],
					"description": "If a user has already approved a transient state, they arre not permitted to decline it too. This test asserts this.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5548c599-49ff-411f-ad6c-39d2f973aea5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ae68dcd8-4aa6-410f-9041-98c210b31390",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - 1 Function Added - 1 Child Role",
					"item": [
						{
							"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 56\",\n    \"description\": \"Test new role description 56\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role Not Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin2",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role now released",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"    pm.expect(jsonData).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.functions.length).to.eql(1);",
											"    pm.expect(jsonData.functions[0].uuid).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.roles.length).to.eql(1);",
											"    pm.expect(jsonData.roles[0].uuid).to.eql(pm.environment.get('child-role-guid'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c7851c6f-75ef-4fe2-9cba-72dc8e8b265e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d5799d5-ce49-4664-8a2d-8e9a46f36350",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Row - Approve Once - Decline Once - Expect Role Decline Transient Role",
					"item": [
						{
							"name": "DeleteRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5e2269-c2d9-4e89-9e77-84928d020ed3",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID. In order to find a UUID for a role, run the 'GetRoles' function to obtain a list of all roles from the API. Select the UUID field of a desired role, and set it as the value of the 'role-guid' within the Postman environment variable. This function references the value of that environment variable as it's Role UUID."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "DeclineRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Declined\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/decline",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"decline"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da7e4240-ff88-432b-ae2f-0ff5df48220b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1977d2db-648f-4f6d-9fcd-dba490b9d3ba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Stores all the requests required for roles, assigned functions and assigned child roles CRUD APIs.",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}