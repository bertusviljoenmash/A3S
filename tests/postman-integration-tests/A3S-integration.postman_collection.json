{
	"info": {
		"_postman_id": "770bc287-271c-4d48-a9c3-db478a4019e3",
		"name": "A3S - Integration",
		"description": "A Postman collection desgined to be executed remotely using Newman within the CI/CD context.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Access Tokens + Initial Security Contract",
			"item": [
				{
					"name": "Get Access Token - A3S Admin - Not Authed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request (Not-Authed)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData).to.have.property('error_description');",
									"    pm.expect(jsonData.error_description).to.eql(\"invalid_username_or_password\");",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "Get Access Token - A3S Bootsrap Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-bootstrap-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-yaml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# A3S Security Contract\n#\n# This file contains information allowing for configuration and declaration of almost all aspects of A3S.\n# More information at: https://github.com/GrindrodBank/A3S/blob/master/doc/security-contracts.md\n#\nname: A3S Security Contract\ngenerated: 2019-10-30 10:00:00 +02:00\napplications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s   \n    applicationFunctions:\n      - name: a3s.users\n        description: Functionality to maintain users within the A3S User store.\n        permissions:\n          - name: a3s.users.read\n            description: View a list of users or a single user.\n          - name: a3s.users.create\n            description: Create a new user. Enables assigning roles to newly created users.\n          - name: a3s.users.delete\n            description: Removes a user, but only from the A3S User store.\n          - name: a3s.users.update\n            description: Updates a user. Also enables modifying roles assigned to the user.\n\n      - name: a3s.teams\n        description: Functionality to maintain teams.\n        permissions:\n          - name: a3s.teams.read\n            description: View list of teams. View a single team.\n          - name: a3s.teams.create\n            description: Create a new team. Grants ability to assign users to this team.\n          - name: a3s.teams.delete\n            description: Remove a team.\n          - name: a3s.teams.update\n            description: Update a team. Change which users are assigned to the team.\n\n      - name: a3s.roles\n        description: Functionality to manage roles and the functions assigned to roles.\n        permissions:\n          - name: a3s.roles.read\n            description: Enables reading lists of roles and individual roles.\n          - name: a3s.roles.create\n            description: Enables creation of roles. Enables assignment of functions to the created role.\n          - name: a3s.roles.delete\n            description: Enables deletion of a role.\n          - name: a3s.roles.update\n            description: Enables updating of a role. Enables updating of functions assinged to a role.\n\n      - name: a3s.applications\n        description: Functionality to manage applications within A3S.\n        permissions:\n          - name: a3s.applications.read\n            description: Enables reading lists of applications and individual applications. Enables viewing which functions and permissions are assigned to applications.\n\n      - name: a3s.clients\n        description: Functionality to manage clients within A3S.\n        permissions:\n          - name: a3s.clients.read\n            description: Enables reading lists of clients and individual clients.\n\n      - name: a3s.functions\n        description: Functionality to manage functions created by micro-services.\n        permissions:\n          - name: a3s.functions.read\n            description: Enables reading lists of functions, individual functions and the lists of permissions assigned to functions.\n          - name: a3s.functions.create\n            description: Enables the creation of new functions and the assignment of permissions to these functions.\n          - name: a3s.functions.update\n            description: Enables the updating of existing functions. Enables editing the permissions that are assigned to a function.\n          - name: a3s.functions.delete\n            description: Enables the deletion of functions.\n\n      - name: a3s.authenticationModes\n        description: Functionality to maintain authentication modes.\n        permissions:\n          - name: a3s.ldapAuthenticationModes.read\n            description: View list of authentication modes. View a single authentication mode.\n          - name: a3s.ldapAuthenticationModes.create\n            description: Create a new authentication mode.\n          - name: a3s.ldapAuthenticationModes.delete\n            description: Remove an authentication mode.\n          - name: a3s.ldapAuthenticationModes.update\n            description: Update an authentication mode.\n\n      - name: a3s.applicationFunctions\n        description: Functionality to manage application functions created by micro-services.\n        permissions:\n          - name: a3s.applicationFunctions.read\n            description: Enables reading lists of application functions, individual application functions and the lists of permissions assigned to application functions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove applications functions directly via the API is prohibited. These operations are only permitted in the context of security contract application (this document).\n            \n      - name: a3s.permissions\n        description: Functionality to manage permissions created by micro-services.\n        permissions:\n          - name: a3s.permissions.read\n            description: Enables reading lists of permissions and individual permissions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove permissions directly via the API is prohibited. These operations are only permitted in the context of security contract application.\n      - name: a3s.securityContracts\n        description: Functionality to apply security contracts for micro-services.\n        permissions:\n          - name: a3s.securityContracts.read\n            description: Enables fetching of a security contract definition.\n          - name: a3s.securityContracts.update\n            description: Enables idempotently applying (creating or updating) a security contract definition. This includes creation or updating of permissions, functions, applications and the relationships between them.\n\n      - name: a3s.clientRegistration\n        description: Functionality to create and update Oauth2.0 and Openid Connect clients.\n        permissions:\n          - name: a3s.clientRegistration.update\n            description: Enables idempotently applying (creating or updating) a client definition.\n\n      - name: a3s.twoFactorAuth\n        description: Functionality to update two-factor authentication configuration.\n        permissions:\n          - name: a3s.twoFactorAuth.remove\n            description: Removes two-factor authentication from a user profile.\n          - name: a3s.twoFactorAuth.validateOtp\n            description: Validates a user authenticator generated OTP.\n\n      - name: a3s.termsOfService\n        description: Functionality to manage terms of service entries.\n        permissions:\n          - name: a3s.termsOfService.read\n            description: Enables reading lists or individual entries of terms of service.\n          - name: a3s.termsOfService.create\n            description: Enables the creation of new terms of service entries.\n          - name: a3s.termsOfService.delete\n            description: Enables the delete of existing terms of service entries.\n\n    dataPolicies:\n      - name: a3s.viewYourTeamsOnly\n        description: Will only return teams that the accessing user is part of when retrieving lists of teams from the API\n\nclients:\n  - clientId: test-client-api\n    name: \"Test client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n\n\ndefaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S Default configuration\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.teams.read\n              - a3s.teams.create\n              - a3s.teams.update\n              - a3s.teams.delete\n              - a3s.roles.read\n              - a3s.roles.create\n              - a3s.roles.update\n              - a3s.roles.delete\n              - a3s.applications.read\n              - a3s.clients.read\n              - a3s.functions.read\n              - a3s.functions.create\n              - a3s.functions.update\n              - a3s.functions.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.applicationFunctions.read\n              - a3s.permissions.read\n              - a3s.securityContracts.update\n              - a3s.securityContracts.read\n              - a3s.clientRegistration.update\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n              - a3s.termsOfService.create\n              - a3s.termsOfService.delete\n              - a3s.termsOfService.read\n          - name: \"a3s.userMaintenance\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n          - name: \"a3s.securityContractMaintenance\"\n            description: \"Functionality to apply security contracts for micro-services.\"\n            permissions:\n              - a3s.securityContracts.read\n              - a3s.securityContracts.update\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Super Admin\"\n        description: An A3S Role that has all the A3S functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Role for managing users.\n        functions:\n          - \"a3s.userMaintenance\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-admin\n        name: a3s-admin\n        surname: system user\n        email: a3s-admin@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110110\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Super Admin\"\n        customAttributes:\n          - key: identity-number\n            value: \"8211193422082\"\n          - key: agent-id\n            value: \"id117\"\n      - username: a3s-user1\n        name: a3s user 1\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user1@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n        customAttributes:\n          - key: identity-number\n            value: \"8211193422083\"\n          - key: agent-id\n            value: \"id118\"\n      - username: a3s-user2\n        name: a3s user 2\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user2@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n        customAttributes:\n          - key: identity-number\n            value: \"8211193422084\"\n          - key: agent-id\n            value: \"id119\"\n\n    teams:\n      - name: default-team\n        description: A simple test default team.\n        users:\n          - a3s-admin\n          - a3s-user1\n      - name: default-team-with-data-policies\n        description: A simple test default team with data policies.\n        users:\n          - a3s-user2\n        dataPolicies:\n          - a3s.viewYourTeamsOnly\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Token - A3S Admin - Authed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Response is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				}
			],
			"description": "Some tests pertaining to applying a security contract. Also some tests for ensuring users are created via the security contract.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clients",
			"item": [
				{
					"name": "GetClients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('clientId');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Set environment permissions id to id of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"api-selected-client-id\", jsonData[0].clientId);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/clients",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Gets a list of applications from the API."
					},
					"response": []
				},
				{
					"name": "GetClient by client-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e34f932-3bb9-4891-b0ad-915e20c7a694",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that client is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clientId');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData).to.have.property('redirectUris');",
									"    pm.expect(jsonData).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData).to.have.property('allowedScopes');",
									"    pm.expect(jsonData).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the correct client was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clientId).to.eql(pm.environment.get('api-selected-client-id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/clients/{{api-selected-client-id}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"clients",
								"{{api-selected-client-id}}"
							]
						},
						"description": "Gets a client by it's client Id."
					},
					"response": []
				},
				{
					"name": "GetClient by client-id - Non Existent clientId - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e34f932-3bb9-4891-b0ad-915e20c7a694",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/clients/123",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"clients",
								"123"
							]
						},
						"description": "Gets a client by it's client Id."
					},
					"response": []
				}
			],
			"description": "Tests pertaining to operating on clients.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Application Functions",
			"item": [
				{
					"name": "GetApplicationFunctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that application functions are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment application function UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"application-function-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/applicationFunctions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"applicationFunctions"
							]
						},
						"description": "Gets a list of application functions from the API."
					},
					"response": []
				}
			],
			"description": "Tests pertaining to retrieving data for application functions lists and individual records.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "80a8830a-bb23-4977-9660-9f6e4922cfd8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f269e200-f948-4073-b1d7-2fe168e431b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Get Roles Tests",
					"item": [
						{
							"name": "GetRoles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that roles are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('roleIds');",
											"    pm.expect(jsonData[0]).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Set environment role UUID to UUID of first element of retrieved list.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData[0].uuid);",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a list of roles from the API."
							},
							"response": []
						},
						{
							"name": "GetRoles Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that roles are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('roleIds');",
											"    pm.expect(jsonData[0]).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Set environment role UUID to UUID of first element of retrieved list.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData[0].uuid);",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a list of roles from the API."
							},
							"response": []
						},
						{
							"name": "GetRoles Expect 404 TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that roles are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('roleIds');",
											"    pm.expect(jsonData[0]).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Set environment role UUID to UUID of first element of retrieved list.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData[0].uuid);",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a list of roles from the API."
							},
							"response": []
						},
						{
							"name": "GetRoles Expect 401 TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that roles are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('roleIds');",
											"    pm.expect(jsonData[0]).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Set environment role UUID to UUID of first element of retrieved list.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData[0].uuid);",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a list of roles from the API."
							},
							"response": []
						},
						{
							"name": "GetRoles Expect 403 TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that roles are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('roleIds');",
											"    pm.expect(jsonData[0]).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Set environment role UUID to UUID of first element of retrieved list.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData[0].uuid);",
											"});    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a list of roles from the API."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roleIds');",
											"    pm.expect(jsonData).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Non UUID  ID - Expect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}fail",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}fail"
									]
								},
								"description": "Gets a role by a UUID that is invalid in structure. Expects a 400 bad request return."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Non Existent UUID - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/1f42d750-8ea3-4007-8a7c-41a8822e2099",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"1f42d750-8ea3-4007-8a7c-41a8822e2099"
									]
								},
								"description": "Gets a role using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Zero UUID  ID - Expect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"00000000-0000-0000-0000-000000000000"
									]
								},
								"description": "Gets a role by a UUID that is invalid in structure. Expects a 400 bad request return."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Expect 403 TEST Requires BootStrap User Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"00000000-0000-0000-0000-000000000000"
									]
								},
								"description": "Gets a role by a UUID that is invalid in structure. Expects a 400 bad request return."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Expect 401 - TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"00000000-0000-0000-0000-000000000000"
									]
								},
								"description": "Gets a role by a UUID that is invalid in structure. Expects a 400 bad request return."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3a44816-9bbc-48be-b5f2-1098854c3505",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f783cd9-323a-4014-9d4c-621bbe2dad90",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - No Functions - No Child Roles - Current Copy",
					"item": [
						{
							"name": "CreateRole - No Functions - No Children - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"    pm.environment.set(\"child-role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 55\",\n    \"description\": \"Test new role description 55\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "CreateRole - No Functions - No Children - Expect New TransientRole - Expect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"    pm.environment.set(\"child-role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 55\",\n    \"description\": \"Test new role description 55\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "CreateRole - No Functions - No Children - Expect New TransientRole - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"    pm.environment.set(\"child-role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 55\",\n    \"description\": \"Test new role description 55\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "CreateRole - No Functions - No Children - Expect New TransientRole - Expect 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"    pm.environment.set(\"child-role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 55\",\n    \"description\": \"Test new role description 55\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role Not Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Same Approver As Capturer - Expect 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states, but using an approver that has already approved the changes, which should result in a 422."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin2",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Same Approver - Expect 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states, but using an approver that has already approved the changes, which should result in a 422."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin3",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role now released",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"    pm.expect(jsonData).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.functions.length).to.eql(0);",
											"    pm.expect(jsonData.roles.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "CreateRole - No Functions - No Children - Expect New TransientRole Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"    pm.environment.set(\"child-role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 55\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 55\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 55\",\n    \"description\": \"Test new role description 55\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "CreateRole - Test Name Unique Check Step 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roleIds');",
											"    pm.expect(jsonData).to.have.property('functionIds');",
											"});",
											"",
											"pm.test(\"Check that returned role was correctly created.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new-2\");",
											"    pm.expect(jsonData.description).to.eql(\"test-new-role-description\");",
											"});",
											"",
											"pm.test(\"Check that the associated roles list is empty.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleIds.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Set environment role UUID and child Role UUID to UUID of the newly created role.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"role-guid\", jsonData.uuid);",
											"    pm.environment.set(\"child-role-guid\", jsonData.uuid);",
											"});    ",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new-2\",\n    \"description\" : \"test-new-role-description\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creates a new role."
							},
							"response": []
						}
					],
					"description": "Create and approve a new role that has no assigned functions or child roles.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a715f865-7de7-4546-b6f4-a1960d4a1ee4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a71a1f90-5fea-4a27-9a31-bacb7fa8f949",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Row - Approve Twice - Expect Role Deleted Copy",
					"item": [
						{
							"name": "DeleteRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5e2269-c2d9-4e89-9e77-84928d020ed3",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID. In order to find a UUID for a role, run the 'GetRoles' function to obtain a list of all roles from the API. Select the UUID field of a desired role, and set it as the value of the 'role-guid' within the Postman environment variable. This function references the value of that environment variable as it's Role UUID."
							},
							"response": []
						},
						{
							"name": "DeleteRole Expect 400 bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5e2269-c2d9-4e89-9e77-84928d020ed3",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID. In order to find a UUID for a role, run the 'GetRoles' function to obtain a list of all roles from the API. Select the UUID field of a desired role, and set it as the value of the 'role-guid' within the Postman environment variable. This function references the value of that environment variable as it's Role UUID."
							},
							"response": []
						},
						{
							"name": "DeleteRole Expect 401 bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5e2269-c2d9-4e89-9e77-84928d020ed3",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID. In order to find a UUID for a role, run the 'GetRoles' function to obtain a list of all roles from the API. Select the UUID field of a desired role, and set it as the value of the 'role-guid' within the Postman environment variable. This function references the value of that environment variable as it's Role UUID."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Same Approver As Capturer - Expect 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states, but using an approver that has already approved the changes, which should result in a 422."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin3",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Not Released - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Delete\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(0);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Deletion Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Role - 1 Function Added - 1 Child Role Copy",
					"item": [
						{
							"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.environment.set(\"role-guid\", jsonData.roleId);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new 56\",\n    \"description\": \"Test new role description 56\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role Not Released - Expect 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is 404 - Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "ApproveRole - Same Approver As Capturer - Expect 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states, but using an approver that has already approved the changes, which should result in a 422."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(1);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Approved\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "Get Access Token - A3S Admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Response is 200.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin2",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
							},
							"response": []
						},
						{
							"name": "ApproveRole",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda3c24c-43fc-4351-bb8f-f66c18dab7f2",
										"exec": [
											"pm.test(\"Response is 200 - Ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('roleId');",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
											"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
											"    pm.expect(jsonData).to.have.property('r_state');",
											"    pm.expect(jsonData).to.have.property('action');",
											"    pm.expect(jsonData).to.have.property('approvalCount');",
											"});",
											"",
											"pm.test(\"Check that the correct transient role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.action).to.eql(\"Create\");",
											"    pm.expect(jsonData.approvalCount).to.eql(2);",
											"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
											"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the correct transient functions were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.latestTransientRoleFunctions[0].approvalCount).to.eql(2);",
											"});",
											"",
											"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Released\");",
											"    pm.expect(jsonData.latestTransientRoleChildRoles[0].approvalCount).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}/approve",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}",
										"approve"
									]
								},
								"description": "Approves role and all it's current transient states."
							},
							"response": []
						},
						{
							"name": "GetRole By UUID - Role now released",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541ee953-a2a5-40c6-983c-415bd7935897",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that role is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"    pm.expect(jsonData).to.have.property('functions');",
											"});",
											"",
											"pm.test(\"Check that the correct role was returned.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
											"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
											"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
											"    pm.expect(jsonData.functions.length).to.eql(1);",
											"    pm.expect(jsonData.functions[0].uuid).to.eql(pm.environment.get('function-guid'));",
											"    pm.expect(jsonData.roles.length).to.eql(1);",
											"    pm.expect(jsonData.roles[0].uuid).to.eql(pm.environment.get('child-role-guid'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Gets a role by it's UUID."
							},
							"response": []
						},
						{
							"name": "UpdateRole - Test Name Unique Check Step 3 - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is ItemNotProcessable\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Updates an existing role's with a new name that is already used, resulting in an error 422."
							},
							"response": []
						},
						{
							"name": "UpdateRole - Test Name Unique Check Step 3 - Expect 422 Duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is ItemNotProcessable\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Updates an existing role's with a new name that is already used, resulting in an error 422."
							},
							"response": []
						},
						{
							"name": "UpdateRole - Test Name Unique Check Step 3 - Expect 401 Unauth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is ItemNotProcessable\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Updates an existing role's with a new name that is already used, resulting in an error 422."
							},
							"response": []
						},
						{
							"name": "UpdateRole - Test Name Unique Check Step 3 - Expect 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is ItemNotProcessable\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Updates an existing role's with a new name that is already used, resulting in an error 422."
							},
							"response": []
						},
						{
							"name": "UpdateRole - Test Name Unique Check Step 3 - Expect 400 Bad Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is ItemNotProcessable\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles/{{role-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles",
										"{{role-guid}}"
									]
								},
								"description": "Updates an existing role's with a new name that is already used, resulting in an error 422."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRole - Test Name Unique Check Step 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that role is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('roleIds');",
									"    pm.expect(jsonData).to.have.property('functionIds');",
									"});",
									"",
									"pm.test(\"Check that returned role was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-role-new-2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-role-description\");",
									"});",
									"",
									"pm.test(\"Check that the associated roles list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set environment role UUID and child Role UUID to UUID of the newly created role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"role-guid\", jsonData.uuid);",
									"    pm.environment.set(\"child-role-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new-2\",\n    \"description\" : \"test-new-role-description\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role."
					},
					"response": []
				},
				{
					"name": "CreateRole - Test Name Unique Check Step 2 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new-2\",\n    \"description\" : \"test-new-role-description\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role, but with already used name, expecting 422."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Test Name Unique Check Step 3 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Updates an existing role's with a new name that is already used, resulting in an error 422."
					},
					"response": []
				},
				{
					"name": "CreateRole - Child Role Attached",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that role is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('roleIds');",
									"    pm.expect(jsonData).to.have.property('functionIds');",
									"});",
									"",
									"pm.test(\"Check that returned role was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-role-new2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-role-description2\");",
									"});",
									"",
									"pm.test(\"Check that the associated roles list has an element in it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the correct child role was assigned to the role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds[0]).to.equal(pm.environment.get('child-role-guid'));",
									"});",
									"",
									"pm.test(\"Set environment compound role UUID of the newly created role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"compound-role-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new2\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with attached child role."
					},
					"response": []
				},
				{
					"name": "CreateRole - Compound Child Role Attached - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-with-compound\",\n    \"description\" : \"test-new-role-with-compound\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{compound-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with attached compound child role, which should result in 422 - ItemNotProcessable."
					},
					"response": []
				},
				{
					"name": "CreateRole - Supply Invalid Structured Child Role ID GUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - BadRequest\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{child-role-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with and invalid structured Child Role Id GUID, resulting in an error 400 (malformed)."
					},
					"response": []
				},
				{
					"name": "CreateRole - Supply Invalid Structured Function ID GUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - BadRequest\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [\"{{function-guid}}fail\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with and invalid structured Function Id GUID, resulting in an error 400 (malformed)."
					},
					"response": []
				},
				{
					"name": "CreateRole - Supply Correctly Structured Child Role ID GUID, Guid does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - NotFound\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [],\n    \"roleIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with and invalid structured Child Role Id GUID, resulting in an error 400 (malformed)."
					},
					"response": []
				},
				{
					"name": "CreateRole - Supply Correctly Structured Function ID GUID, Guid does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - NotFound\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with and invalid structured function Id GUID, resulting in an error 404 (not found)."
					},
					"response": []
				},
				{
					"name": "UpdateRole - No UUID in Body - 400 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-updated\",\n    \"description\" : \"test-updated-role-description\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Updates an existing role, but neglects to supply a UUID in the body as required. A 400 is expected."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Base Attributes - All Relations Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that role is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('roleIds');",
									"    pm.expect(jsonData).to.have.property('functionIds');",
									"});",
									"",
									"pm.test(\"Check that returned role base attributes were correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-role-updated\");",
									"    pm.expect(jsonData.description).to.eql(\"test-role-description-updated\");",
									"});",
									"",
									"pm.test(\"Check the correct role was updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('role-guid'));",
									"});",
									"",
									"pm.test(\"Check that the associated roles list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated function list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.functionIds.length).to.equal(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-updated\",\n    \"description\" : \"test-role-description-updated\",\n    \"roleIds\": [],\n    \"functionIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Updates an existing role's base attributes and clears any related entities from the role."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Supply Invalid Structured Child Role ID GUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - BadRequest\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{child-role-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Creates a new role with and invalid structured Child Role Id GUID, resulting in an error 400 (malformed)."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Supply Invalid Structured Function ID GUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - BadRequest\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [\"{{function-guid}}fail\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Creates a new role with and invalid structured Function Id GUID, resulting in an error 400 (malformed)."
					},
					"response": []
				},
				{
					"name": "CreateRole - Plain role 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that role is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('roleIds');",
									"    pm.expect(jsonData).to.have.property('functionIds');",
									"});",
									"",
									"pm.test(\"Check that returned role was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-role-plain-2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-role-plain-2-description\");",
									"});",
									"",
									"pm.test(\"Check that the associated roles list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set environment role UUID and child Role UUID to UUID of the newly created role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"child-role-2-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-plain-2\",\n    \"description\" : \"test-role-plain-2-description\",\n    \"functionIds\": [],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Supply Correctly Structured Child Role ID GUID, Guid does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - NotFound\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{child-role-2-guid}}\",\n    \"name\": \"test-role-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [],\n    \"roleIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{child-role-2-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{child-role-2-guid}}"
							]
						},
						"description": "Creates a new role with and invalid structured Child Role Id GUID, resulting in an error 400 (malformed)."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Supply Correctly Structured Function ID GUID, Guid does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - NotFound\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{child-role-2-guid}}\",\n    \"name\": \"test-role-fail\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{child-role-2-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{child-role-2-guid}}"
							]
						},
						"description": "Creates a new role with and invalid structured function Id GUID, resulting in an error 404 (not found)."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Compound Child Role Attached - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-with-compound\",\n    \"description\" : \"test-new-role-with-compound\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{compound-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Updates an existing role with attached compound child role, which should result in 422 - ItemNotProcessable."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Update child role to become compound role - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{role-guid}}\",\n    \"name\": \"test-role-with-parent-compound\",\n    \"description\" : \"test-new-role-with-parent-compound\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{child-role-2-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{child-role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{child-role-guid}}"
							]
						},
						"description": "Updates an existing child role to become compound role, which should result in 422 - ItemNotProcessable."
					},
					"response": []
				},
				{
					"name": "CreateRole - Child Role Attached Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that role is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('roleIds');",
									"    pm.expect(jsonData).to.have.property('functionIds');",
									"});",
									"",
									"pm.test(\"Check that returned role was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-role-new2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-role-description2\");",
									"});",
									"",
									"pm.test(\"Check that the associated roles list has an element in it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the correct child role was assigned to the role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleIds[0]).to.equal(pm.environment.get('child-role-guid'));",
									"});",
									"",
									"pm.test(\"Set environment compound role UUID of the newly created role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"compound-role-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new2\",\n    \"description\" : \"test-new-role-description2\",\n    \"functionIds\": [],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role with attached child role."
					},
					"response": []
				},
				{
					"name": "CreateRole - 1 Function - 1 Child Role - Expect New TransientRole Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 200 - Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set profile GUID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('roleId');",
									"    pm.environment.set(\"role-guid\", jsonData.roleId);",
									"});",
									"",
									"pm.test(\"Check that returned transient role is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('latestTransientRoleFunctions');",
									"    pm.expect(jsonData).to.have.property('latestTransientRoleChildRoles');",
									"    pm.expect(jsonData).to.have.property('r_state');",
									"    pm.expect(jsonData).to.have.property('action');",
									"});",
									"",
									"pm.test(\"Check that the correct transient role was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roleId).to.eql(pm.environment.get('role-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"test-role-new 56\");",
									"    pm.expect(jsonData.description).to.eql(\"Test new role description 56\");",
									"    pm.expect(jsonData.r_state).to.eql(\"Captured\");",
									"    pm.expect(jsonData.action).to.eql(\"Create\");",
									"    pm.expect(jsonData.latestTransientRoleFunctions.length).to.equal(1);",
									"    pm.expect(jsonData.latestTransientRoleChildRoles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the correct transient functions were retured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.latestTransientRoleFunctions[0].roleId).to.eql(pm.environment.get('role-guid'));",
									"    pm.expect(jsonData.latestTransientRoleFunctions[0].functionId).to.eql(pm.environment.get('function-guid'));",
									"    pm.expect(jsonData.latestTransientRoleFunctions[0].r_state).to.eql(\"Captured\");",
									"});",
									"",
									"pm.test(\"Check that the correct transient child roles were retured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.latestTransientRoleChildRoles[0].roleId).to.eql(pm.environment.get('role-guid'));",
									"    pm.expect(jsonData.latestTransientRoleChildRoles[0].childRoleId).to.eql(pm.environment.get('child-role-guid'));",
									"    pm.expect(jsonData.latestTransientRoleChildRoles[0].r_state).to.eql(\"Captured\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new 56\",\n    \"description\": \"Test new role description 56\",\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": [\"{{child-role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creaets a new Role via the API. Roles are comprised of functions (which themselves are comprised of permissions)."
					},
					"response": []
				}
			],
			"description": "Tests pertaining to operating on data pertaining to Roles.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "80a8830a-bb23-4977-9660-9f6e4922cfd8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f269e200-f948-4073-b1d7-2fe168e431b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Permissions",
			"item": [
				{
					"name": "GetPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that permissions are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment permissions UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"permission-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions"
							]
						},
						"description": "Gets a list of permissions from the API."
					},
					"response": []
				},
				{
					"name": "GetPermission By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that permission is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Check that the correct permission was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('permission-guid'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions/{{permission-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions",
								"{{permission-guid}}"
							]
						},
						"description": "Gets a permissions by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetPermission By UUID - Non UUID  ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions/{{permission-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions",
								"{{permission-guid}}fail"
							]
						},
						"description": "Gets a permission by a UUID that is invalid in structure. Expects a 400 bad request return."
					},
					"response": []
				},
				{
					"name": "GetPermission By UUID - Non Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets a permissions using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
					},
					"response": []
				},
				{
					"name": "GetPermission By UUID - Zero UUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Gets a permissions using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
					},
					"response": []
				}
			],
			"description": "Tests pertaining to operating on permissions.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Applications",
			"item": [
				{
					"name": "GetApplications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that applications are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('functions');",
									"});",
									"",
									"pm.test(\"Check that application has correctly structures associated functions in the first element of the returned list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that application functions have correctly structured associated permissions within the first element of the returned list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment application UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"application-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/applications",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"applications"
							]
						},
						"description": "Gets a list of applications from the API."
					},
					"response": []
				}
			],
			"description": "Tests pertaining to operating on applications.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "022139f3-fd25-4ae8-93cb-f149c3df2f55",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a82d367d-e57c-4355-8122-d53472c761bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Functions",
			"item": [
				{
					"name": "GetFunctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a list containing the three functions defined within the security contract was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Check that the first element of the list is a correctly structured function\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0]).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that the first element of the list is a function with correctly structured associated permissions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment function UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"function-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions?includeRelations=true",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							],
							"query": [
								{
									"key": "includeRelations",
									"value": "true"
								}
							]
						},
						"description": "Gets a list of functions from the API. Three were expected to be created with the earlier application of the security contract. Three element list is expected."
					},
					"response": []
				},
				{
					"name": "GetFunction By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that function is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that the correct function was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('function-guid'));",
									"});",
									"",
									"pm.test(\"Check that function has correctly structured associated permissions.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData.permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData.permissions[0]).to.have.property('description');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Gets a function by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetFunction By UUID - Non UUID  ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}fail"
							]
						},
						"description": "Gets a function by a UUID that is invalid in structure. Expects a 400 bad request return."
					},
					"response": []
				},
				{
					"name": "GetFunction By UUID - Non Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets a function using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
					},
					"response": []
				},
				{
					"name": "GetFunction By UUID - Zero UUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Gets a function by a UUID that is invalid in structure. Expects a 400 bad request return."
					},
					"response": []
				},
				{
					"name": "CreateFunction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned function is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that returned function is represents the newly created function.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('test-function');",
									"    pm.expect(jsonData.description).to.eql('test-function description');",
									"    pm.expect(jsonData.permissions[0].uuid).to.eql(pm.environment.get('permission-guid'));",
									"});",
									"",
									"pm.test(\"Set 'function-guid' environment variable to guid of new function.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"function-guid\", jsonData.uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Create a new function"
					},
					"response": []
				},
				{
					"name": "CreateFunction - Supply Invalid Structured Application ID GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function-new-fail\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}a\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Creates a new function but specifies the assigned application ID using an invalidly structured application ID GUID."
					},
					"response": []
				},
				{
					"name": "CreateFunction - Supply Correctly Structured Permission ID GUID, GUID does not exists - Expect 404 - Not Found Entity Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function-new-fail\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\",\n    \t\t\t\t\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Creates a new function, attempting to change an assigned permission ID using a validly structured application ID GUID, but the GUID does not exist."
					},
					"response": []
				},
				{
					"name": "CreateFunction - Supply Invalid Structured Permission ID GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function-new-fail\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\",\n    \t\t\t\t\"{{permission-guid}}a\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Creates a new function but specifies the assigned application ID using an invalidly structured permission ID GUID."
					},
					"response": []
				},
				{
					"name": "CreateFunction - Supply Correctly Structured Application ID GUID, GUID does not exists - Expect 404 - Not Found Entity Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"1f42d750-8ea3-4007-8a7c-41a8822e2099\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Creates a new function setting an assigned permission ID using a validly structured application ID GUID, but the GUID does not exist."
					},
					"response": []
				},
				{
					"name": "CreateFunction - Test Name Unique Check Step 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned function is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that returned function is represents the newly created function.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('test-function-2');",
									"    pm.expect(jsonData.description).to.eql('test-function description');",
									"    pm.expect(jsonData.permissions[0].uuid).to.eql(pm.environment.get('permission-guid'));",
									"});",
									"",
									"pm.test(\"Set 'function-guid' environment variable to guid of new function.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"function-guid\", jsonData.uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function-2\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Create a new function"
					},
					"response": []
				},
				{
					"name": "CreateFunction - Test Name Unique Check Step 2 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function-2\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Create a new function, but with a pre-existing name. Expecting 422."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Test Name Unique Check Step 3 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function's name to an an existing name"
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Basic Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned function is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that returned function is represents the updated function.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('test-function updated');",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('function-guid'));",
									"    pm.expect(jsonData.description).to.eql('test-function description updated');",
									"    pm.expect(jsonData.permissions[0].uuid).to.eql(pm.environment.get('permission-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function's basic attributes and asserts that these were correctly updated."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Unassign Perms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned function is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that returned function no longer contains any permissions.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.permissions.length).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function's associated permissions to be un-assigned and ensures that this happens correctly."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Re-Assign Perms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned function is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that returned function has the correctly associated permission with it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('test-function updated');",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('function-guid'));",
									"    pm.expect(jsonData.description).to.eql('test-function description updated');",
									"    pm.expect(jsonData.permissions[0].uuid).to.eql(pm.environment.get('permission-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function's basic attributes and asserts that these were correctly updated."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Supply Invalid Structured Application ID GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}a\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function by attempting to change it's assigned application ID using an invalidly structured application ID GUID."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Supply Correctly Structured Application ID GUID, GUID does not exists - Expect 404 - Not Found Entity Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"1f42d750-8ea3-4007-8a7c-41a8822e2099\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function by attempting to change it's assigned application ID using a validly structured application ID GUID, but the GUID does not exist."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Supply Invalid Structured Permission ID GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\",\n    \t\t\t\t\"{{permission-guid}}a\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function by attempting to change it's assigned application ID using an invalidly structured application ID GUID."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - No UUID in Body - 400 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}a\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function, but neglects to supply a UUID in the body as required. A 400 is expected."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Supply Correctly Structured Permission ID GUID, GUID does not exists - Expect 404 - Not Found Entity Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\",\n    \t\t\t\t\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function by attempting to change an assigned permission ID using a validly structured permission ID GUID, but the GUID does not exist."
					},
					"response": []
				},
				{
					"name": "DeleteFunction By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Gets a function by it's UUID."
					},
					"response": []
				},
				{
					"name": "DeleteFunction By UUID - Unfindable UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Deletes a function by it's UUID, but with an unfindable UUID, expecting 404."
					},
					"response": []
				},
				{
					"name": "DeleteFunction By UUID - Incorrectly Structured UUID - Expect 4040",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/1f42d750-8ea3-4007-8a7c-41a8822e2099fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099fail"
							]
						},
						"description": "Deletes a function by it's UUID, but with an incorrectly structured UUID, expecting 400."
					},
					"response": []
				},
				{
					"name": "GetFunction By UUID - Was Deleted - 404 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Gets a function by it's UUID."
					},
					"response": []
				}
			],
			"description": "Houses requests to test all aspects of operating on functions via the API.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get Transients Copy",
			"item": [
				{
					"name": "Get Transients",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Get Transients Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "LDAP Authentication Modes",
			"item": [
				{
					"name": "GetLdapAuthenticationModes - Empty List Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20d94a43-c28e-4490-8b9c-7ec9b84d802e",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that the returned LDAP Auth Mode list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap"
							]
						},
						"description": "Gets a list of LDAP authentication modes. None have been created yet, so an empty list is expected."
					},
					"response": []
				},
				{
					"name": "CreateLdapAuthenticationMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "107896b8-e3c5-40b7-a0d7-13e2c7b8ee3c",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('hostName');",
									"    pm.expect(jsonData).to.have.property('port');",
									"    pm.expect(jsonData).to.have.property('isLdaps');",
									"    pm.expect(jsonData).to.have.property('account');",
									"    pm.expect(jsonData).to.have.property('baseDn');",
									"    pm.expect(jsonData).to.have.property('ldapAttributes');",
									"});",
									"",
									"pm.test(\"Set hostname environment from global var.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"ldap-hostname\", jsonData.hostName);",
									"});",
									"",
									"",
									"pm.test(\"Check that the correct LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"open-ldap-dev\");",
									"    pm.expect(jsonData.hostName).to.eql(pm.environment.get('ldap-hostname'));",
									"    pm.expect(jsonData.port).to.eql(389);",
									"    pm.expect(jsonData.isLdaps).to.eql(true);",
									"    pm.expect(jsonData.account).to.eql(\"admin\");",
									"    pm.expect(jsonData.baseDn).to.eql(\"dc=bigbaobab,dc=org\");",
									"});",
									"",
									"pm.test(\"Check that returned LDAP Auth Mode has no attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ldapAttributes.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set LDAP Auth Mode ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"authentication-mode-guid\", jsonData.uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"open-ldap-dev\",\n    \"hostName\": \"{{ldap-hostname}}\",\n    \"port\": 389,\n    \"isLdaps\": true,\n    \"account\": \"admin\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap"
							]
						},
						"description": "Creates a new LDAP authentication mode."
					},
					"response": []
				},
				{
					"name": "CreateLdapAuthenticationMode - Test Name Unique Check Step 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "107896b8-e3c5-40b7-a0d7-13e2c7b8ee3c",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('hostName');",
									"    pm.expect(jsonData).to.have.property('port');",
									"    pm.expect(jsonData).to.have.property('isLdaps');",
									"    pm.expect(jsonData).to.have.property('account');",
									"    pm.expect(jsonData).to.have.property('baseDn');",
									"    pm.expect(jsonData).to.have.property('ldapAttributes');",
									"});",
									"",
									"pm.test(\"Check that the correct LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"open-ldap-dev-2\");",
									"    pm.expect(jsonData.hostName).to.eql(pm.environment.get('ldap-hostname'));",
									"    pm.expect(jsonData.port).to.eql(389);",
									"    pm.expect(jsonData.isLdaps).to.eql(true);",
									"    pm.expect(jsonData.account).to.eql(\"admin\");",
									"    pm.expect(jsonData.baseDn).to.eql(\"dc=bigbaobab,dc=org\");",
									"});",
									"",
									"pm.test(\"Check that returned LDAP Auth Mode has no attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ldapAttributes.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set LDAP Auth Mode ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"authentication-mode-guid\", jsonData.uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"open-ldap-dev-2\",\n    \"hostName\": \"{{ldap-hostname}}\",\n    \"port\": 389,\n    \"isLdaps\": true,\n    \"account\": \"admin\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap"
							]
						},
						"description": "Creates a new LDAP authentication mode."
					},
					"response": []
				},
				{
					"name": "UpdateLdapAuthenticationMode - Test Name Unique Check Step 2 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4655849a-3e70-4ec1-a4bb-36437c2544d8",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{authentication-mode-guid}}\",\n    \"name\": \"open-ldap-dev\",\n    \"hostName\": \"localhost-updated\",\n    \"port\": 390,\n    \"isLdaps\": false,\n    \"account\": \"admin-updated\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab-updated,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Updates an authentication mode by it's UUID. The updated payload does not contain any LDAP attributes."
					},
					"response": []
				},
				{
					"name": "GetLdapAuthenticationMode By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cac9b954-b8fd-45c2-87a9-09b7e5914256",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('hostName');",
									"    pm.expect(jsonData).to.have.property('port');",
									"    pm.expect(jsonData).to.have.property('isLdaps');",
									"    pm.expect(jsonData).to.have.property('account');",
									"    pm.expect(jsonData).to.have.property('baseDn');",
									"    pm.expect(jsonData).to.have.property('ldapAttributes');",
									"});",
									"",
									"pm.test(\"Check that the correct LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('authentication-mode-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"open-ldap-dev-2\");",
									"    pm.expect(jsonData.hostName).to.eql(pm.environment.get('ldap-hostname'));",
									"    pm.expect(jsonData.port).to.eql(389);",
									"    pm.expect(jsonData.isLdaps).to.eql(true);",
									"    pm.expect(jsonData.account).to.eql(\"admin\");",
									"    pm.expect(jsonData.baseDn).to.eql(\"dc=bigbaobab,dc=org\");",
									"});",
									"",
									"pm.test(\"Check that returned LDAP Auth Mode has no attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ldapAttributes.length).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Gets an authentication mode by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetLdapAuthenticationMode By UUID - Non UUID  ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}fail"
							]
						},
						"description": "Gets an LDAP Auth mode by a UUID that is invalid in structure. Expects a 400 bad request return."
					},
					"response": []
				},
				{
					"name": "GetLdapAuthenticationMode By UUID - Non Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets an LDAP Auth Mode using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
					},
					"response": []
				},
				{
					"name": "UpdateLdapAuthenticationMode - NoAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4655849a-3e70-4ec1-a4bb-36437c2544d8",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('hostName');",
									"    pm.expect(jsonData).to.have.property('port');",
									"    pm.expect(jsonData).to.have.property('isLdaps');",
									"    pm.expect(jsonData).to.have.property('account');",
									"    pm.expect(jsonData).to.have.property('baseDn');",
									"    pm.expect(jsonData).to.have.property('ldapAttributes');",
									"});",
									"",
									"pm.test(\"Check that the correct LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('authentication-mode-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"open-ldap-dev-updated\");",
									"    pm.expect(jsonData.hostName).to.eql(\"localhost-updated\");",
									"    pm.expect(jsonData.port).to.eql(390);",
									"    pm.expect(jsonData.isLdaps).to.eql(false);",
									"    pm.expect(jsonData.account).to.eql(\"admin-updated\");",
									"    pm.expect(jsonData.baseDn).to.eql(\"dc=bigbaobab-updated,dc=org\");",
									"});",
									"",
									"pm.test(\"Check that returned LDAP Auth Mode has no attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ldapAttributes.length).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{authentication-mode-guid}}\",\n    \"name\": \"open-ldap-dev-updated\",\n    \"hostName\": \"localhost-updated\",\n    \"port\": 390,\n    \"isLdaps\": false,\n    \"account\": \"admin-updated\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab-updated,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Updates an authentication mode by it's UUID. The updated payload does not contain any LDAP attributes."
					},
					"response": []
				},
				{
					"name": "CreateLdapAuthenticationMode - With LDAP Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "107896b8-e3c5-40b7-a0d7-13e2c7b8ee3c",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('hostName');",
									"    pm.expect(jsonData).to.have.property('port');",
									"    pm.expect(jsonData).to.have.property('isLdaps');",
									"    pm.expect(jsonData).to.have.property('account');",
									"    pm.expect(jsonData).to.have.property('baseDn');",
									"    pm.expect(jsonData).to.have.property('ldapAttributes');",
									"});",
									"",
									"pm.test(\"Check that the correct LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"open-ldap-dev-2\");",
									"    pm.expect(jsonData.hostName).to.eql(pm.environment.get('ldap-hostname'));",
									"    pm.expect(jsonData.port).to.eql(389);",
									"    pm.expect(jsonData.isLdaps).to.eql(true);",
									"    pm.expect(jsonData.account).to.eql(\"admin\");",
									"    pm.expect(jsonData.baseDn).to.eql(\"dc=bigbaobab,dc=org\");",
									"});",
									"",
									"pm.test(\"Check that returned LDAP Auth Mode has five attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ldapAttributes.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"Set LDAP Auth Mode ID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"authentication-mode-guid\", jsonData.uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"open-ldap-dev-2\",\n    \"hostName\": \"{{ldap-hostname}}\",\n    \"port\": 389,\n    \"isLdaps\": true,\n    \"account\": \"admin\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab,dc=org\",\n    \"ldapAttributes\": [{\n    \t\"userField\": \"firstName\",\n    \t\"ldapField\": \"givenName\"\n    },\n    {\n    \t\"userField\": \"surname\",\n    \t\"ldapField\": \"sn\"\n    },\n    {\n    \t\"userField\": \"userName\",\n    \t\"ldapField\": \"userPrincipalName\"\n    },\n    {\n    \t\"userField\": \"email\",\n    \t\"ldapField\": \"mail\"\n    },\n    {\n    \t\"userField\": \"avatar\",\n    \t\"ldapField\": \"jpegPhoto\"\n    }]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap"
							]
						},
						"description": "Creates a new LDAP authentication mode. The LDAP Auth Mode contains associated LDAP attributes."
					},
					"response": []
				},
				{
					"name": "UpdateLdapAuthenticationMode - With Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31c36c11-72cd-4db0-a874-cdf6d7ff71f5",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured LDAP Auth Mode was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('hostName');",
									"    pm.expect(jsonData).to.have.property('port');",
									"    pm.expect(jsonData).to.have.property('isLdaps');",
									"    pm.expect(jsonData).to.have.property('account');",
									"    pm.expect(jsonData).to.have.property('baseDn');",
									"    pm.expect(jsonData).to.have.property('ldapAttributes');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{authentication-mode-guid}}\",\n    \"name\": \"open-ldap-dev-2-updated\",\n    \"hostName\": \"{{ldap-hostname}}\",\n    \"port\": 389,\n    \"isLdaps\": false,\n    \"account\": \"admin\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab,dc=org\",\n    \"ldapAttributes\": [{\n    \t\"userField\": \"firstName\",\n    \t\"ldapField\": \"givenNameUpdated\"\n    },\n    {\n    \t\"userField\": \"surname\",\n    \t\"ldapField\": \"sn\"\n    },\n    {\n    \t\"userField\": \"userName\",\n    \t\"ldapField\": \"userPrincipalName\"\n    },\n    {\n    \t\"userField\": \"email\",\n    \t\"ldapField\": \"mail\"\n    },\n    {\n    \t\"userField\": \"avatar\",\n    \t\"ldapField\": \"jpegPhoto\"\n    }]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Updates an authentication mode by it's UUID. Updates the associated LDAp attributes."
					},
					"response": []
				},
				{
					"name": "UpdateLdapAuthenticationMode - No UUID in Body - 400 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"open-ldap-dev-updated\",\n    \"hostName\": \"localhost-updated\",\n    \"port\": 390,\n    \"isLdaps\": false,\n    \"account\": \"admin-updated\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab-updated,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Updates an existing LDAP Auth Mode, but neglects to supply a UUID in the body as required. A 400 is expected."
					},
					"response": []
				},
				{
					"name": "CreateUser - With LDAP Auth Mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"    pm.expect(jsonData).to.have.property('customAttributes');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"New User First Name LDAP\");",
									"    pm.expect(jsonData.surname).to.eql(\"New User Surname LDAP\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"admin\");",
									"    pm.expect(jsonData.email).to.eql(\"newldap@emailadress.local\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user has no roles.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user has no teams.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user has two custom attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that returned user custom customAttributes was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes[0].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[0].value).to.be.oneOf([\"id125\", \"8211193422080\"]);",
									"    pm.expect(jsonData.customAttributes[1].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[1].value).to.be.oneOf([\"id125\", \"8211193422080\"]);",
									"});",
									"",
									"pm.test(\"Set 'user-guid' environment variable to UUID of the created user.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user-guid\", jsonData.uuid);",
									"}); ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name LDAP\",\n\t\"surname\": \"New User Surname LDAP\",\n\t\"email\": \"newldap@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"admin\",\n\t\"password\": \"Password1#\",\n\t\"ldapAuthenticationModeId\": \"{{authentication-mode-guid}}\",\n    \"roleIds\": [],\n    \"customAttributes\": [{\n            \"key\": \"identity-number\",\n            \"value\": \"8211193422080\" \n        },\n        {\n            \"key\": \"agent-id\",\n            \"value\": \"id125\" \n        }\n    ],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user that has no roles associated with it on creation."
					},
					"response": []
				},
				{
					"name": "DeleteLdapAuthenticationMode - User Assigned - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cac9b954-b8fd-45c2-87a9-09b7e5914256",
								"exec": [
									"pm.test(\"Response is 422 - non-processible entity.\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Gets an authentication mode by it's UUID."
					},
					"response": []
				},
				{
					"name": "UpdateUser - Unassign From LDAP Auth Mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updatedldap@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name-ldap\");",
									"    pm.expect(jsonData.avatar).to.eql(\"dGVzdCB1cGRhdGVkIGF2YXRhcg==\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updatedldap@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name-ldap\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Gets a user by it's UUID."
					},
					"response": []
				},
				{
					"name": "DeleteLdapAuthenticationMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cac9b954-b8fd-45c2-87a9-09b7e5914256",
								"exec": [
									"pm.test(\"Response is 204 - no content.\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Gets an authentication mode by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetLdapAuthenticationMode By UUID - Deleted - 404 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cac9b954-b8fd-45c2-87a9-09b7e5914256",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Gets an authentication mode by it's UUID."
					},
					"response": []
				}
			],
			"description": "Adds a set of requests to tests all aspects of the API pertaining to LDAP authentication modes.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "TermsOfService",
			"item": [
				{
					"name": "CreateTermsOfService - successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that terms of service entry is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('agreementName');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});",
									"",
									"pm.test(\"Check that returned terms of service entry was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.agreementName).to.eql(\"test-agreement-new\");",
									"    pm.expect(jsonData.version).to.eql(new Date().getFullYear() + \".1\");",
									"});",
									"",
									"pm.test(\"Set environment terms of service entry UUID to UUID of the newly created team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"terms-of-service-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"agreementName\": \"test-agreement-new\",\n    \"agreementFileData\": \"H4sIAF3V110AA+3T0QqCMBQG4K73FHuB9KibQkmvIstmCtPFNo2I3j1t4E1SN6YE+27OBoftjPF7vuGq1pksMs1VV+Xcy7XezAoAYkLwUJOYviqEdm+REAcRjWlCQwKAIUgigA2GeceY1mrDVD/KhbWiY00uheBqoq9vK4oP59iX4LH+iaM83fAd4V4hG7O98upcmh1upKqZ2KMHWntC55e89/yXphaz3vE1/yGM+acBGfJPaOzyv4R0+O0DQqlvF2vP4ziO4yzjCdehEDwADAAA\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/termsOfService",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService"
							]
						},
						"description": "Creates a new terms of service entry, which is a an agreement that need to be agreed upon by a user."
					},
					"response": []
				},
				{
					"name": "CreateTermsOfService - Successful - Version Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that terms of service entry is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('agreementName');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});",
									"",
									"pm.test(\"Check that returned terms of service entry was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.agreementName).to.eql(\"test-agreement-new\");",
									"    pm.expect(jsonData.version).to.eql(new Date().getFullYear() + \".2\");",
									"});",
									"",
									"pm.test(\"Set environment terms of service entry UUID to UUID of the newly created team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"terms-of-service-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"agreementName\": \"test-agreement-new\",\n    \"agreementFileData\": \"H4sIAF3V110AA+3T0QqCMBQG4K73FHuB9KibQkmvIstmCtPFNo2I3j1t4E1SN6YE+27OBoftjPF7vuGq1pksMs1VV+Xcy7XezAoAYkLwUJOYviqEdm+REAcRjWlCQwKAIUgigA2GeceY1mrDVD/KhbWiY00uheBqoq9vK4oP59iX4LH+iaM83fAd4V4hG7O98upcmh1upKqZ2KMHWntC55e89/yXphaz3vE1/yGM+acBGfJPaOzyv4R0+O0DQqlvF2vP4ziO4yzjCdehEDwADAAA\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/termsOfService",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService"
							]
						},
						"description": "Creates a new terms of service entry, which is a an agreement that need to be agreed upon by a user."
					},
					"response": []
				},
				{
					"name": "CreateTermsOfService - Corrupt Archive File - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - Not Processable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"agreementName\": \"test-agreement-new\",\n    \"agreementFileData\": \"H4sIAF3V110AA+3T0QqCMBQG4K73FHuB9KibQkmvIstmCtPFNo2I3j1t4E1SN6YE+27OBoftjPF7vuGq1pksMs1VV+Xcy7XezAoAYkLwUJOYviqEdm+REAcRjWlCQwKAIUgigA2GeceY1mrDVD/KhbWiY00uheBqoq9vK4oP59iX4LH+iaM83fAd4V4hG7O98upcmh1upKqZ2KMHWntC55e89/yXphaz3vE1/yGM+acBGfJPaOzy\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/termsOfService",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService"
							]
						},
						"description": "Creates a new terms of service entry, which is a an agreement that need to be agreed upon by a user."
					},
					"response": []
				},
				{
					"name": "CreateTermsOfService - Not TermsOfService Archive File - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - Not Processable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"agreementName\": \"test-agreement-new\",\n    \"agreementFileData\": \"H4sIADm7210AA+3T0QqCMBQGYK/3FOcF0uPaHJT0Lss0g+nCzSKid08deBV1NSXYd3M2OGxnjD9OrDZxYUzkDyJmjMFYRcanitTtHUYh3fKMC04ZImDKOBMRoMeZZr2xshtGucpe3WRbaKXK7kPf0FZVX85xL4G5/omjPj3gSWBQ6dZu7uXlXNsdtLprpNqTF1l7wsCneMp/bRvl746f+ac455+nbMy/oDzkfwn5+PUHQvLELdaeJwiCIFjGG5ZtobgADAAA\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/termsOfService",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService"
							]
						},
						"description": "Creates a new terms of service entry, which is a an agreement that need to be agreed upon by a user."
					},
					"response": []
				},
				{
					"name": "GetTermsOfService by UUID - Non UUID ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4ae9b-37cd-4933-9576-5abd384049b0",
								"exec": [
									"pm.test(\"Response is 400 - Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService/{{terms-of-service-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService",
								"{{terms-of-service-guid}}fail"
							]
						},
						"description": "Gets a terms of service entry by it's UUID. In order to obtain this UUID, run the 'GetTermsOfServices' API method, which returns all currently registered terms of service entries. Select the UUID field from the desired function and set it as the 'terms-of-service-guid' within the Postman environment. This API call uses the value of the environment variable as the terms of service UUID."
					},
					"response": []
				},
				{
					"name": "GetTermsOfService by UUID - Non  Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4ae9b-37cd-4933-9576-5abd384049b0",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets a terms of service entry by it's UUID. In order to obtain this UUID, run the 'GetTermsOfServices' API method, which returns all currently registered terms of service entries. Select the UUID field from the desired function and set it as the 'terms-of-service-guid' within the Postman environment. This API call uses the value of the environment variable as the terms of service UUID."
					},
					"response": []
				},
				{
					"name": "GetTermsOfService by UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd2b48be-2567-42ce-81e9-2f6cd57ed8d5",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that terms of service entry is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('agreementName');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});",
									"",
									"pm.test(\"Check that the correct terms of service entry was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('terms-of-service-guid'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService/{{terms-of-service-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService",
								"{{terms-of-service-guid}}"
							]
						},
						"description": "Gets a terms of service entry by it's UUID. In order to obtain this UUID, run the 'GetTermsOfServices' API method, which returns all currently registered terms of service entries. Select the UUID field from the desired function and set it as the 'terms-of-service-guid' within the Postman environment. This API call uses the value of the environment variable as the terms of service UUID."
					},
					"response": []
				},
				{
					"name": "DeleteTermsOfService by UUID - Non UUID ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4ae9b-37cd-4933-9576-5abd384049b0",
								"exec": [
									"pm.test(\"Response is 400 - Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService/{{terms-of-service-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService",
								"{{terms-of-service-guid}}fail"
							]
						},
						"description": "Gets a terms of service entry by it's UUID. In order to obtain this UUID, run the 'GetTermsOfServices' API method, which returns all currently registered terms of service entries. Select the UUID field from the desired function and set it as the 'terms-of-service-guid' within the Postman environment. This API call uses the value of the environment variable as the terms of service UUID."
					},
					"response": []
				},
				{
					"name": "DeleteTermsOfService by UUID - Non  Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4ae9b-37cd-4933-9576-5abd384049b0",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets a terms of service entry by it's UUID. In order to obtain this UUID, run the 'GetTermsOfServices' API method, which returns all currently registered terms of service entries. Select the UUID field from the desired function and set it as the 'terms-of-service-guid' within the Postman environment. This API call uses the value of the environment variable as the terms of service UUID."
					},
					"response": []
				},
				{
					"name": "DeleteTermsOfService by UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d4ae9b-37cd-4933-9576-5abd384049b0",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService/{{terms-of-service-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService",
								"{{terms-of-service-guid}}"
							]
						},
						"description": "Gets a terms of service entry by it's UUID. In order to obtain this UUID, run the 'GetTermsOfServices' API method, which returns all currently registered terms of service entries. Select the UUID field from the desired function and set it as the 'terms-of-service-guid' within the Postman environment. This API call uses the value of the environment variable as the terms of service UUID."
					},
					"response": []
				},
				{
					"name": "GetTermsOfServices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4a479fe-f651-442e-b3dc-5aba4bafce74",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that terms of service entries are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('agreementName');",
									"    pm.expect(jsonData[0]).to.have.property('version');",
									"});",
									"",
									"pm.test(\"Set environment terms of service entries UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"terms-of-service-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/termsOfService",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"termsOfService"
							]
						},
						"description": "Gets a list of all the currently registered terms of service entries. This is useful for seeing all terms of service entries and obtaining their UUIDs, which can be used for the 'GetTermsOfService' and 'DeleteTermsOfService' API requests."
					},
					"response": []
				}
			],
			"description": "This tests the Terms of Service API functionality.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Teams",
			"item": [
				{
					"name": "GetTeams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that teams are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0]).to.have.property('teamIds');",
									"    pm.expect(jsonData[0]).to.have.property('dataPolicyIds');",
									"    pm.expect(jsonData[0]).to.have.property('userIds');",
									"});",
									"",
									"pm.test(\"Set environment team UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"team-guid\", jsonData[0].uuid);",
									"});    ",
									"",
									"pm.test(\"Get the 'default-team-with-data-policies' team that has a data policy linked to it, and record the data policy guid.\", function () {",
									"    var jsonData = pm.response.json();",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.length; loop++)",
									"    {",
									"        if (jsonData[loop].name === \"default-team-with-data-policies\")",
									"        {",
									"            pm.environment.set(\"team-with-data-policy-guid\", jsonData[loop].uuid);",
									"            pm.environment.set(\"data-policy-guid\", jsonData[loop].dataPolicyIds[0]);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"pm.test(\"Confirm that data policy Guids have been set.\", function () {",
									"    pm.expect(pm.environment.get(\"team-with-data-policy-guid\").length).to.not.eql(0);",
									"    pm.expect(pm.environment.get(\"data-policy-guid\").length).to.not.eql(0);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams?includeRelations=true",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							],
							"query": [
								{
									"key": "includeRelations",
									"value": "true"
								}
							]
						},
						"description": "Gets a list of teams from the API."
					},
					"response": []
				},
				{
					"name": "GetTeam By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"    pm.expect(jsonData).to.have.property('userIds');",
									"});",
									"",
									"pm.test(\"Check that the correct team was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('team-guid'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Gets a team by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetTeam By UUID - Non UUID  ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}fail"
							]
						},
						"description": "Gets a team by a UUID that is invalid in structure. Expects a 400 bad request return."
					},
					"response": []
				},
				{
					"name": "GetTeam By UUID - Non Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets a team using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
					},
					"response": []
				},
				{
					"name": "GetTeam By UUID - Zero UUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Gets a team using a correctly structured, but zero UUID. Expects a 400 - bad request response."
					},
					"response": []
				},
				{
					"name": "CreateTeam - No Child Teams - No Data Policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"});",
									"",
									"pm.test(\"Check that returned team was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-new\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-team-description\");",
									"});",
									"",
									"pm.test(\"Check that the associated teams list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated data policies list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set environment team UUID and child Team UUID to UUID of the newly created team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"team-guid\", jsonData.uuid);",
									"    pm.environment.set(\"child-team-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new\",\n    \"description\" : \"test-new-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team without any child teams."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Supply incorrectly structured child team Guid - expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}fail\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with an incorrectly structured child team Guid, resulting in a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Supply incorrectly structured data policy Guid - expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with an incorrectly structured data policy Guid, resulting in a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Supply incorrectly structured Terms of Service Guid - expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}\"],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}fail\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with an incorrectly structured data policy Guid, resulting in a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Supply correctly structured child team Guid, Guid does not exist - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not found.\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with an correctly structured child team Guid that does not exist, resulting in a 404 - Not found."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Supply correctly structured data policy Guid, Guid does not exist - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not found.\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with an correctly structured data policy Guid that does not exist, resulting in a 404 - Not found."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Supply correctly structured Terms of Service Guid, Guid does not exist - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not found.\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": \"1f42d750-8ea3-4007-8a7c-41a8822e2099\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with an correctly structured Terms of Service Guid that does not exist, resulting in a 404 - Not found."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Test Name Unique Step 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"});",
									"",
									"pm.test(\"Check that returned team was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-new-2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-team-description\");",
									"});",
									"",
									"pm.test(\"Check that the associated teams list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated data policies list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set environment team UUID and child Team UUID to UUID of the newly created team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"team-guid\", jsonData.uuid);",
									"    pm.environment.set(\"child-team-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new-2\",\n    \"description\" : \"test-new-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team without any child teams."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Test Name Unique Step 2 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new\",\n    \"description\" : \"test-updated-team-description\",\n    \"userIds\": [],\n    \"teamIds\": [],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Updates an existing team"
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Test Name Unique Step 3 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-new\",\n    \"description\" : \"test-updated-team-description\",\n    \"userIds\": [],\n    \"teamIds\": [],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team, but with a pre-existing name, resulting in a 422 - Item not processable."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Child Team Attached - No Data Policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"});",
									"",
									"pm.test(\"Check that returned team was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-new2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-team-description2\");",
									"});",
									"",
									"pm.test(\"Check that the associated team list has an element in it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the associated data policy list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the correct child team was assigned to the team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds[0]).to.equal(pm.environment.get('child-team-guid'));",
									"});",
									"",
									"pm.test(\"Set environment compound team UUID.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"compound-team-guid\", jsonData.uuid);",
									"});",
									"",
									"pm.test(\"Confirm that compound GUID has been set.\", function () {",
									"    pm.expect(pm.environment.get(\"compound-team-guid\").length).to.not.eql(0);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new2\",\n    \"description\" : \"test-new-team-description2\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with attached child team."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Compound Child Role Attached - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-with-compound\",\n    \"description\" : \"test-new-team-description-with-compound\",\n    \"teamIds\": [\"{{compound-team-guid}}\"],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with attached compound child team, which should result in 422 - ItemNotProcessable."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Child Team Attached - Data Policy attached",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"});",
									"",
									"pm.test(\"Check that returned team was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-new-with-data-policies\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-team-description-with-data-policies\");",
									"});",
									"",
									"pm.test(\"Check that the associated team list has an element in it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the associated data policy list has an element in it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the correct child team was assigned to the team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds[0]).to.equal(pm.environment.get('child-team-guid'));",
									"});",
									"",
									"pm.test(\"Check that the correct data policy was assigned to the team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds[0]).to.equal(pm.environment.get('data-policy-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new-with-data-policies\",\n    \"description\" : \"test-new-team-description-with-data-policies\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with attached child team and data policy."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Terms Of Service entry attached - No Child Team Attached - No Data Policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"    pm.expect(jsonData).to.have.property('termsOfServiceId');",
									"});",
									"",
									"pm.test(\"Check that returned team was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-new-3\");",
									"    pm.expect(jsonData.description).to.eql(\"test-new-team-description-3\");",
									"});",
									"",
									"pm.test(\"Check that the associated team list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated data policy list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated child team list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the correct terms of service entry was assigned to the team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.termsOfServiceId).to.equal(pm.environment.get('terms-of-service-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new-3\",\n    \"description\" : \"test-new-team-description-3\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with attached child team."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Non Existent Terms Of Service entry - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new-4\",\n    \"description\" : \"test-new-team-description-4\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": \"1f42d750-8ea3-4007-8a7c-41a8822e2099\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team with attached child team."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - No UUID in Body - 400 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-updated\",\n    \"description\" : \"test-updated-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": null\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team, but neglects to supply a UUID in the body as required. A 400 is expected."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Base Attributes - All Relations Cleared",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"});",
									"",
									"pm.test(\"Check that returned team base attributes were correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-updated\");",
									"    pm.expect(jsonData.description).to.eql(\"test-updated-team-description\");",
									"});",
									"",
									"pm.test(\"Check the correct team was updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('team-guid'));",
									"});",
									"",
									"pm.test(\"Check that the associated user list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated teams list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated data policy list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-updated\",\n    \"description\" : \"test-updated-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": null\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team's base attributes and clears any related entities from the team."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Base Attributes with TermsOfService - All Relations Cleared Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"    pm.expect(jsonData).to.have.property('termsOfServiceId');",
									"});",
									"",
									"pm.test(\"Check that returned team base attributes were correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-updated\");",
									"    pm.expect(jsonData.description).to.eql(\"test-updated-team-description\");",
									"});",
									"",
									"pm.test(\"Check the correct team was updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('team-guid'));",
									"});",
									"",
									"pm.test(\"Check that the associated user list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated teams list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated data policy list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the correct terms of service entry was assigned to the team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.termsOfServiceId).to.equal(pm.environment.get('terms-of-service-guid'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-updated\",\n    \"description\" : \"test-updated-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team's base attributes and clears any related entities from the team."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Supply incorrectly structured child team Guid - expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}fail\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}\"],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Update an existing team with an incorrectly structured child team Guid, resulting in a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Supply incorrectly structured data policy Guid - expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}fail\"],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Update an existing team with an incorrectly structured data policy Guid, resulting in a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Incorrectly structured Terms Of Service entry - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-updated\",\n    \"description\" : \"test-updated-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}fail\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team but with incorrectly structured Terms of Service entry, resulting in a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "CreateTeam - plain team 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that team is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('teamIds');",
									"    pm.expect(jsonData).to.have.property('dataPolicyIds');",
									"});",
									"",
									"pm.test(\"Check that returned team was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"test-team-plain-2\");",
									"    pm.expect(jsonData.description).to.eql(\"test-team-plain-2-description\");",
									"});",
									"",
									"pm.test(\"Check that the associated teams list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teamIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that the associated data policies list is empty.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.dataPolicyIds.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set environment team UUID and child Team UUID to UUID of the newly created team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"child-team-2-guid\", jsonData.uuid);",
									"});    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-plain-2\",\n    \"description\" : \"test-team-plain-2-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team without any child teams."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Supply correctly structured child team Guid, Guid does not exist - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not found.\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{child-team-2-guid}}\",\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"dataPolicyIds\": [\"{{data-policy-guid}}\"],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{child-team-2-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{child-team-2-guid}}"
							]
						},
						"description": "Update an existing team with an correctly structured child team Guid that does not exist, resulting in a 404 - Not found."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Supply correctly structured data policy Guid, Guid does not exist - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not found.\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{child-team-2-guid}}\",\n    \"name\": \"test-team-br\",\n    \"description\" : \"test-new-team-br\",\n    \"teamIds\": [\"{{child-team-guid}}\"],\n    \"dataPolicyIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"termsOfServiceId\": \"{{terms-of-service-guid}}\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{child-team-2-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{child-team-2-guid}}"
							]
						},
						"description": "Update an existing team with an correctly structured data policy Guid that does not exist, resulting in a 404 - Not found."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Non Existent Terms Of Service entry - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-updated\",\n    \"description\" : \"test-updated-team-description\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": \"1f42d750-8ea3-4007-8a7c-41a8822e2099\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team's base attributes and clears any related entities from the team."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Compound Team Attached - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-with-compound\",\n    \"description\" : \"test-new-team-with-compound\",\n    \"functionIds\": [],\n    \"teamIds\": [\"{{compound-team-guid}}\"],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": null\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team with attached compound team, which should result in 422 - ItemNotProcessable."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Update child team to become compound team - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - ItemNotProcessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{team-guid}}\",\n    \"name\": \"test-team-with-compound\",\n    \"description\" : \"test-new-team-with-compound\",\n    \"functionIds\": [],\n    \"teamIds\": [\"{{child-team-2-guid}}\"],\n    \"dataPolicyIds\": [],\n    \"termsOfServiceId\": null\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{child-team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{child-team-guid}}"
							]
						},
						"description": "Updates an existing child role to become compound role, which should result in 422 - ItemNotProcessable."
					},
					"response": []
				}
			],
			"description": "Tests pertaining to operating on data pertaining to Teams.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "80a8830a-bb23-4977-9660-9f6e4922cfd8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f269e200-f948-4073-b1d7-2fe168e431b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GetUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a list containing the five users, the three users defined within the security contract + bootstrap user + user created in LDAP auth mode, was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"Check that the second (non-bootsrap) element of the list is a correctly structured user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('uuid');",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1]).to.have.property('surname');",
									"    pm.expect(jsonData[1]).to.have.property('email');",
									"    pm.expect(jsonData[1]).to.have.property('avatar');",
									"    pm.expect(jsonData[1]).to.have.property('phoneNumber');",
									"    pm.expect(jsonData[1]).to.have.property('roles');",
									"    pm.expect(jsonData[1]).to.have.property('teams');",
									"    pm.expect(jsonData[1]).to.have.property('customAttributes');",
									"});",
									"",
									"pm.test(\"Set 'user-guid' environment variable to UUID of second (non-bootstrap) element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user-guid\", jsonData[1].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Gets a list of users from the API. Three were expected to be created with the earlier application of the security contract + the bootstrap. Three element list is expected."
					},
					"response": []
				},
				{
					"name": "GetUser By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured user was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('customAttributes');",
									"});",
									"",
									"pm.test(\"Check that returned user has two custom attributes assigned, created via security contract.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Test that the second user custom customAttributes was correctly created via security contract.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes[0].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[0].value).to.be.oneOf([\"id117\", \"8211193422082\"]);",
									"    pm.expect(jsonData.customAttributes[1].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[1].value).to.be.oneOf([\"id117\", \"8211193422082\"]);",
									"});",
									"",
									"pm.test(\"Check that the correct user was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Gets a user by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetUser By UUID - Non UUID  ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}fail"
							]
						},
						"description": "Gets a user by a UUID that is invalid in structure. Expects a 400 bad request return."
					},
					"response": []
				},
				{
					"name": "GetUser By UUID - Non Existent UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Gets a user using a correctly structured, but non-existent UUID. Expects a 404 - not found response."
					},
					"response": []
				},
				{
					"name": "CreateUser - No Roles or Teams or CustomAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"New User First Name One\");",
									"    pm.expect(jsonData.surname).to.eql(\"New User Surname One\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110110\");",
									"    pm.expect(jsonData.username).to.eql(\"new-user-name-one\");",
									"    pm.expect(jsonData.email).to.eql(\"newone@emailadress.local\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user has no roles.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user has no teams.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user has no custom attributes.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes.length).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name One\",\n\t\"surname\": \"New User Surname One\",\n\t\"email\": \"newone@emailadress.local\",\n\t\"phoneNumber\": \"+27110110110\",\n\t\"username\": \"new-user-name-one\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [],\n    \"customAttributes\": [],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user that has no roles or teams or CustomAttributes associated with it on creation."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"New User First Name Two\");",
									"    pm.expect(jsonData.surname).to.eql(\"New User Surname Two\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110112\");",
									"    pm.expect(jsonData.username).to.eql(\"new-user-name-two\");",
									"    pm.expect(jsonData.email).to.eql(\"newtwo@emailadress.local\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user has a role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0].uuid).to.equal(pm.environment.get('role-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Two\",\n\t\"surname\": \"New User Surname Two\",\n\t\"email\": \"newtwo@emailadress.local\",\n\t\"phoneNumber\": \"+27110110112\",\n\t\"username\": \"new-user-name-two\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"customAttributes\": [],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a user that has legitmate roles attached to it and verify role attachement occurred correctly."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"New User First Name Three\");",
									"    pm.expect(jsonData.surname).to.eql(\"New User Surname Three\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110112\");",
									"    pm.expect(jsonData.username).to.eql(\"new-user-name-three\");",
									"    pm.expect(jsonData.email).to.eql(\"newthree@emailadress.local\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user has a team assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct team assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams[0].uuid).to.equal(pm.environment.get('team-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Three\",\n\t\"surname\": \"New User Surname Three\",\n\t\"email\": \"newthree@emailadress.local\",\n\t\"phoneNumber\": \"+27110110112\",\n\t\"username\": \"new-user-name-three\",\n\t\"password\": \"Password1#\",\n    \"teamIds\": [\"{{team-guid}}\"],\n    \"customAttributes\": [],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a user that has legitmate teams attached to it and verify team attachement occurred correctly."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Roles and Teams and CustomAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"New User First Name Five\");",
									"    pm.expect(jsonData.surname).to.eql(\"New User Surname Five\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110112\");",
									"    pm.expect(jsonData.username).to.eql(\"new-user-name-five\");",
									"    pm.expect(jsonData.email).to.eql(\"newfive@emailadress.local\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user has a role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0].uuid).to.equal(pm.environment.get('role-guid'));",
									"});",
									"",
									"pm.test(\"Check that returned user has a team assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct team assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams[0].uuid).to.equal(pm.environment.get('team-guid'));",
									"});",
									"",
									"pm.test(\"Check that returned user has two custom attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that returned user custom customAttributes was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes[0].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[0].value).to.be.oneOf([\"id126\", \"8211203422080\"]);",
									"    pm.expect(jsonData.customAttributes[1].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[1].value).to.be.oneOf([\"id126\", \"8211203422080\"]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Five\",\n\t\"surname\": \"New User Surname Five\",\n\t\"email\": \"newfive@emailadress.local\",\n\t\"phoneNumber\": \"+27110110112\",\n\t\"username\": \"new-user-name-five\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"teamIds\": [\"{{team-guid}}\"],\n    \"customAttributes\": [{\n            \"key\": \"identity-number\",\n            \"value\": \"8211203422080\" \n        },\n        {\n            \"key\": \"agent-id\",\n            \"value\": \"id126\" \n        }\n    ],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a user that has legitmate roles and teams and CustomAttributes attached to it and verify roles and teams attachement occurred correctly."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Roles - Related Role UUID does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Attempt to create a user that references a non-existent UUID for the role that is being assigned to the user. Expects a 404 not found."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Roles - Related Role UUID invalid structure - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [\"{{role-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Attempt to create a user that references an invalid structured UUID for the role that is being assigned to the user. Expects a 400 bad request."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Teams - Related Team UUID does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"teamIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Attempt to create a user that references a non-existent UUID for the team that is being assigned to the user. Expects a 404 not found."
					},
					"response": []
				},
				{
					"name": "CreateUser - With Teams - Related Team UUID invalid structure - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"teamIds\": [\"{{team-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Attempt to create a user that references an invalid UUID for the team that is being assigned to the user. Expects a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "CreateUser -  Duplicate Username - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - Non Processable Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name One\",\n\t\"surname\": \"New User Surname One\",\n\t\"email\": \"newone@emailadress.local\",\n\t\"phoneNumber\": \"+27110110110\",\n\t\"username\": \"new-user-name-one\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user that has a username that already exists. Expects the API to return a 422 - non processable entity response."
					},
					"response": []
				},
				{
					"name": "CreateUser - 2FA Enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"New User First Name Four\");",
									"    pm.expect(jsonData.surname).to.eql(\"New User Surname Four\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110114\");",
									"    pm.expect(jsonData.username).to.eql(\"new-user-name-four\");",
									"    pm.expect(jsonData.email).to.eql(\"newfour@emailadress.local\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user has no roles.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user has no teams.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Set 'user-guid' environment variable to UUID of the created user.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user-guid\", jsonData.uuid);",
									"}); ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name Four\",\n\t\"surname\": \"New User Surname Four\",\n\t\"email\": \"newfour@emailadress.local\",\n\t\"phoneNumber\": \"+27110110114\",\n\t\"username\": \"new-user-name-four\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user that has no roles associated with it on creation."
					},
					"response": []
				},
				{
					"name": "UpdateUser - No Roles or Teams or CustomAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name\");",
									"    pm.expect(jsonData.avatar).to.eql(\"dGVzdCB1cGRhdGVkIGF2YXRhcg==\");",
									"});",
									"",
									"pm.test(\"Check that returned user now has no roles assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user now has no teams assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned user has no custom attributes.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes.length).to.equal(0);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [],\n    \"teamIds\": [],\n    \"customAttributes\": [],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Updates a user by it's UUID with no roles or teams or CustomAttributes."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name\");",
									"    pm.expect(jsonData.avatar).to.eql(\"dGVzdCB1cGRhdGVkIGF2YXRhcg==\");",
									"});",
									"",
									"pm.test(\"Check that returned user now has a role assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0].uuid).to.equal(pm.environment.get('role-guid'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"teamIds\": [],\n    \"customAttributes\": [],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Update a user with roles attached."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name\");",
									"    pm.expect(jsonData.avatar).to.eql(\"dGVzdCB1cGRhdGVkIGF2YXRhcg==\");",
									"});",
									"",
									"pm.test(\"Check that returned user now has a team assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct team assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams[0].uuid).to.equal(pm.environment.get('team-guid'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [],\n    \"teamIds\": [\"{{team-guid}}\"],\n    \"customAttributes\": [],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Update a user with teams attached."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Roles and Teams and CustomAttributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name\");",
									"    pm.expect(jsonData.avatar).to.eql(\"dGVzdCB1cGRhdGVkIGF2YXRhcg==\");",
									"});",
									"",
									"pm.test(\"Check that returned user now has a role assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0].uuid).to.equal(pm.environment.get('role-guid'));",
									"});",
									"",
									"pm.test(\"Check that returned user now has a team assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct team assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.teams[0].uuid).to.equal(pm.environment.get('team-guid'));",
									"});",
									"",
									"pm.test(\"Check that returned user has two custom attributes assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that returned user custom customAttributes was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.customAttributes[0].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[0].value).to.be.oneOf([\"id127\", \"8211173422080\"]);",
									"    pm.expect(jsonData.customAttributes[1].key).to.be.oneOf([\"agent-id\", \"identity-number\"]);",
									"    pm.expect(jsonData.customAttributes[1].value).to.be.oneOf([\"id127\", \"8211173422080\"]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"teamIds\": [\"{{team-guid}}\"],\n    \"customAttributes\": [{\n            \"key\": \"identity-number\",\n            \"value\": \"8211173422080\" \n        },\n        {\n            \"key\": \"agent-id\",\n            \"value\": \"id127\" \n        }\n    ],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Updates a user by it's UUID with roles and teams and CustomAttributes."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Roles - Related Role UUID does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Attempt to update a user that references a non-existent UUID for the role that is being assigned to the user. Expects a 404 not found."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Roles - Related Role UUID invalid structure - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"roleIds\": [\"{{role-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Attempt to update a user that references an invalid structured UUID for the role that is being assigned to the user. Expects a 400 bad request."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Teams - Related Team UUID does not exist - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 404 - Entity Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"teamIds\": [\"1f42d750-8ea3-4007-8a7c-41a8822e2099\"],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Attempt to update a user that references a non-existent UUID for the team that is being assigned to the user. Expects a 404 not found."
					},
					"response": []
				},
				{
					"name": "UpdateUser - With Teams - Related Team UUID invalid structure - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n    \"name\": \"New User First Name Six\",\n\t\"surname\": \"New User Surname Six\",\n\t\"email\": \"newsix@emailadress.local\",\n\t\"phoneNumber\": \"+27110110113\",\n\t\"username\": \"new-user-name-six\",\n\t\"password\": \"Password1#\",\n    \"teamIds\": [\"{{team-guid}}fail\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Attempt to update a user that references an invalid UUID for the team that is being assigned to the user. Expects a 400 - Bad request."
					},
					"response": []
				},
				{
					"name": "UpdateUser - Username Already Exists - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"new-user-name-one\",\n    \"roleIds\": [],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Gets a user's username to one that already exists. Expect a 422."
					},
					"response": []
				},
				{
					"name": "UpdateUser - Avatar Not Base64 - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is 422 - Entity Not Processable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"avatar\": \"test updated avatar no base 64\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Attempts to update a user's avatar using a non base64 encoded string. Expects a 422."
					},
					"response": []
				},
				{
					"name": "UpdateUser - Explicitly Set Avator to Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name\");",
									"    pm.expect(jsonData.avatar).to.eql(\"\");",
									"});",
									"",
									"pm.test(\"Check that returned user now has a role assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0].uuid).to.equal(pm.environment.get('role-guid'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Update a user avator by explictly setting the field value to null."
					},
					"response": []
				},
				{
					"name": "UpdateUser - No Avator Field - Expect Avator Nulled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned user is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('surname');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('avatar');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('roles');",
									"    pm.expect(jsonData).to.have.property('teams');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User First Name\");",
									"    pm.expect(jsonData.surname).to.eql(\"Updated User Surname\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local\");",
									"    pm.expect(jsonData.phoneNumber).to.eql(\"+27110110119\");",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name\");",
									"    pm.expect(jsonData.avatar).to.eql(null);",
									"});",
									"",
									"pm.test(\"Check that returned user now has a role assigned to it.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that returned user has the correct role assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.roles[0].uuid).to.equal(pm.environment.get('role-guid'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Update a user avator by not supplying the avator field in an attempt to unset the avatar. Expect an uneert avatar."
					},
					"response": []
				},
				{
					"name": "UpdateUser - No UUID in Body - 400 Expected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Updates an existing user, but neglects to supply a UUID in the body as required. A 400 is expected."
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53ce2ba9-c674-47f1-ad6d-9229b08732b6",
								"exec": [
									"pm.test(\"Response is 204 - No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Deletes a user by it's UUID."
					},
					"response": []
				},
				{
					"name": "DeleteUser By UUID - Unfindable UUID - Expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 404 - Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/1f42d750-8ea3-4007-8a7c-41a8822e2099",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099"
							]
						},
						"description": "Deletes a function by it's UUID, but with an unfindable UUID, expecting 404."
					},
					"response": []
				},
				{
					"name": "DeleteUser By UUID - Invalid structured UUID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 400 - Bad request.\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/1f42d750-8ea3-4007-8a7c-41a8822e2099fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"1f42d750-8ea3-4007-8a7c-41a8822e2099fail"
							]
						},
						"description": "Deletes a function by it's UUID, but with an invalid structured UUID, expecting 400."
					},
					"response": []
				},
				{
					"name": "Get Deleted User By UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured user was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('isDeleted');",
									"});",
									"",
									"pm.test(\"Check that returned user was correctly updated/deleted.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"    pm.expect(jsonData.username).to.eql(\"updated-user-name - Deleted\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@emailadress.local - Deleted\");",
									"});",
									"",
									"pm.test(\"Check that the correct user was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('user-guid'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Gets a previously deleted user by it's UUID."
					},
					"response": []
				}
			],
			"description": "Houses requests to test all aspects of operating on users via the API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "587cf261-9c41-4198-9ce9-6c59dfd20bd8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0526cadc-7d60-46cf-a4fc-2ae1db2732cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TwoFactorAuth",
			"item": [
				{
					"name": "Remove-2fa - Non Existent UUID - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1f49efd-29c4-4850-912f-36cc5bafd591",
								"exec": [
									"pm.test(\"Response is 404 - Not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/twoFactorAuth/users/725f847f-c1ad-4274-bb86-1703f10ac497",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"twoFactorAuth",
								"users",
								"725f847f-c1ad-4274-bb86-1703f10ac497"
							]
						},
						"description": "Removes a user's two-factor registration details and associated tokens, given the user's UUID."
					},
					"response": []
				},
				{
					"name": "Remove-2fa - Non UUID  ID - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1f49efd-29c4-4850-912f-36cc5bafd591",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/twoFactorAuth/users/{{user-guid}}fail",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"twoFactorAuth",
								"users",
								"{{user-guid}}fail"
							]
						},
						"description": "Removes a user's two-factor registration details and associated tokens, given the user's UUID."
					},
					"response": []
				},
				{
					"name": "Remove-2fa - Valid - Expect 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1f49efd-29c4-4850-912f-36cc5bafd591",
								"exec": [
									"pm.test(\"Response is 204 - No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/twoFactorAuth/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"twoFactorAuth",
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Removes a user's two-factor registration details and associated tokens, given the user's UUID."
					},
					"response": []
				},
				{
					"name": "Validate OTP - Non Existent User - expect 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a99dd45-57f9-43f1-bd50-97399bb5adab",
								"exec": [
									"pm.test(\"Response is 404 - Not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\tuserId: \"53ed3eef-88ae-4961-9c88-3fa8765da754\",\n\tOTP: 233320\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/twoFactorAuth/validate",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"twoFactorAuth",
								"validate"
							]
						},
						"description": "Validates a user's authenticator app OTP value. The user needs to be registered for two-factor authentication with a validated authenticator registered."
					},
					"response": []
				},
				{
					"name": "Validate OTP - Incorrect OTP - expect 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a99dd45-57f9-43f1-bd50-97399bb5adab",
								"exec": [
									"pm.test(\"Response is 200 - Ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that a correctly structured response was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"pm.test(\"Check that the correct success status was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\tuserId: \"{{user-guid}}\",\n\tOTP: 233320\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/twoFactorAuth/validate",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"twoFactorAuth",
								"validate"
							]
						},
						"description": "Validates a user's authenticator app OTP value. The user needs to be registered for two-factor authentication with a validated authenticator registered."
					},
					"response": []
				}
			],
			"description": "API methods relating to management of two-factor authentication related configuration.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3bf2d225-9c4a-4de4-ac1d-2b5f1feeaca4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "63045c8a-ef7e-488f-9417-17bfa09bfb32",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Security Contracts",
			"item": [
				{
					"name": "GetSecurityContractDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - New Client Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "clients:\n  - clientId: test-security-contract-api\n    name: \"Test security contract client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For New Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of clients has increased to 3.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Check that the newly created client was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[2].clientId).to.eql('test-security-contract-api');",
									"    pm.expect(jsonData.clients[2].name).to.eql('Test security contract client');",
									"    pm.expect(jsonData.clients[2].allowedGrantTypes[0]).to.eql('authorization_code');",
									"    pm.expect(jsonData.clients[2].allowedGrantTypes[1]).to.eql('password');",
									"    pm.expect(jsonData.clients[2].redirectUris[0]).to.eql('https://www.getpostman.com/oauth2/callback');",
									"    pm.expect(jsonData.clients[2].postLogoutRedirectUris[0]).to.eql('https://www.getpostman.com');",
									"    pm.expect(jsonData.clients[2].allowedCorsOrigins[0]).to.eql('https://www.getpostman.com');",
									"    pm.expect(jsonData.clients[2].allowedScopes[0]).to.eql('a3s');",
									"    pm.expect(jsonData.clients[2].allowedScopes[1]).to.eql('dokuti');",
									"    pm.expect(jsonData.clients[2].allowedScopes[2]).to.eql('openid');",
									"    pm.expect(jsonData.clients[2].allowedScopes[3]).to.eql('profile');",
									"    pm.expect(jsonData.clients[2].hashedClientSecrets[0]).to.eql('K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=');",
									"    pm.expect(jsonData.clients[2].allowedOfflineAccess).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the client that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Empty Non Required Client Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "clients:\n  - clientId: test-security-contract-api\n    name: \"Test security contract client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - TestEmpty Non Required Client Fields - Expect Empty Values on Returned Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of clients has increased to 3.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"Check that the newly created client was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[2].clientId).to.eql('test-security-contract-api');",
									"    pm.expect(jsonData.clients[2].name).to.eql('Test security contract client');",
									"    pm.expect(jsonData.clients[2].allowedGrantTypes[0]).to.eql('authorization_code');",
									"    pm.expect(jsonData.clients[2].allowedGrantTypes[1]).to.eql('password');",
									"    pm.expect(jsonData.clients[2].redirectUris[0]).to.eql('https://www.getpostman.com/oauth2/callback');",
									"    pm.expect(jsonData.clients[2].postLogoutRedirectUris.length).to.eql(0);",
									"    pm.expect(jsonData.clients[2].allowedCorsOrigins.length).to.eql(0);",
									"    pm.expect(jsonData.clients[2].allowedScopes[0]).to.eql('a3s');",
									"    pm.expect(jsonData.clients[2].allowedScopes[1]).to.eql('dokuti');",
									"    pm.expect(jsonData.clients[2].allowedScopes[2]).to.eql('openid');",
									"    pm.expect(jsonData.clients[2].allowedScopes[3]).to.eql('profile');",
									"    pm.expect(jsonData.clients[2].hashedClientSecrets[0]).to.eql('K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=');",
									"    pm.expect(jsonData.clients[2].allowedOfflineAccess).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the client that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - New Client - Empty CORS Origins - Expect 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "clients:\n  - clientId: test-security-contract-api\n    name: \"Test security contract client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - New Application Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For New Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly created application was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    // Check that expected application functions are in the returned array.",
									"    var result;",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction1\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction2\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function one for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"     result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function two for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that the new application has a data policy assigned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].dataPolicies.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Check that the new application has the correct data policy assigned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].dataPolicies[0].name).to.equal(\"a3s-pipeline-test.dataPolicy\");",
									"    pm.expect(jsonData.applications[1].dataPolicies[0].description).to.equal(\"Test data policy description.\");",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Application Only - Data Policy Removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Application - Data Policy Removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly created application was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    // Check that expected application functions are in the returned array.",
									"    var result;",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction1\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction2\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function one for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"     result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function two for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that the application has no data policy assigned to it any longer.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].dataPolicies.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Update Application Function Descriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test - updated by contract.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Update Application Function Descriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly created application was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    // Check that expected application functions are in the returned array.",
									"    var result;",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction1\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction2\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function one for pipeline test - updated by contract.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"     result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function two for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Update Application Function Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1-changed\n        description: Test function one for pipeline test - updated by contract.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Update Application Function Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications is 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly created application was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    // Check that expected application functions are in the returned array.",
									"    var result;",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction1-changed\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction2\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function one for pipeline test - updated by contract.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"     result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function two for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Update Application Function",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test - updated by contract.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Update Application Function",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly created application was correctly created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    // Check that expected application functions are in the returned array.",
									"    var result;",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction1\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].name === \"a3s.pipelineTestFunction2\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function one for pipeline test - updated by contract.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"     result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        if (jsonData.applications[1].applicationFunctions[loop].description === \"Test function two for pipeline test.\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Update Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.read-updated\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Update Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly updated permissions are assigned to the functions.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    var result;",
									"    var loop;",
									"    var perm_loop;",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        for (perm_loop = 0; perm_loop < jsonData.applications[1].applicationFunctions[loop].permissions.length; perm_loop++)",
									"        {",
									"            if (jsonData.applications[1].applicationFunctions[loop].permissions[perm_loop].name === \"a3s-pipeline-test.test.read-updated\")",
									"            {",
									"                result=true;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    ",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Update Permission Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test - updated by contract.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission-updated.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Update Permission Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the newly updated permissions description is correrctly updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[1].fullname).to.eql('a3s-pipeline-test');",
									"    pm.expect(jsonData.applications[1].applicationFunctions.length).to.eql(2);",
									"    ",
									"    var result;",
									"    var loop;",
									"    var perm_loop;",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.applications[1].applicationFunctions.length; loop++)",
									"    {",
									"        for (perm_loop = 0; perm_loop < jsonData.applications[1].applicationFunctions[loop].permissions.length; perm_loop++)",
									"        {",
									"            if (jsonData.applications[1].applicationFunctions[loop].permissions[perm_loop].description === \"Read test permission-updated.\")",
									"            {",
									"                result=true;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    ",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the application that was created in the previous partial security contract upload is correct."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Duplicate Permission Assignment - Expect 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is 422 - Non-Processable Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test - updated by contract.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission-updated.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - New Default Configs Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "defaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S-Pipeline-Test-Config\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s-pipeline-test\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.TestPipeline.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s-pipeline-test.test.read\n              - a3s-pipeline-test.test.create\n              - a3s-pipeline-test.test.update\n              - a3s-pipeline-test.test.archive\n          - name: \"a3s.TestPipeline.Reader\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s-pipeline-test.test.read\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Test Pipeline Super Admin\"\n        description: An A3S Test Pipeline Super Admin Role that has all the A3S test Pipeline functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.TestPipeline.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Test Pipeline Role for reading things..\n        functions:\n          - \"a3s.TestPipeline.Reader\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-test-pipeline-user\n        name: a3s-test-pipeline-user\n        surname: pipeline-test-surname\n        email: a3s-pipeline-test@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110117\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Test Pipeline Super Admin\"\n\n    teams:\n      - name: default-test-pipeline-team\n        description: A simple test default team.\n        users:\n          - a3s-test-pipeline-user\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For New Default Configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract is correctly structured at the top level.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('clients');",
									"    pm.expect(jsonData).to.have.property('applications');",
									"    pm.expect(jsonData).to.have.property('defaultConfigurations');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured client level. Checking first client.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.clients[0]).to.have.property('clientId');",
									"    pm.expect(jsonData.clients[0]).to.have.property('name');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedGrantTypes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('redirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedCorsOrigins');",
									"    pm.expect(jsonData.clients[0]).to.have.property('postLogoutRedirectUris');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedScopes');",
									"    pm.expect(jsonData.clients[0]).to.have.property('hashedClientSecrets');",
									"    pm.expect(jsonData.clients[0]).to.have.property('allowedOfflineAccess');",
									"});",
									"",
									"pm.test(\"Check that the amount of applications within the default configuration has increased to 2.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0].applications.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"Check that the correct application default configs were created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0].applications[1].name).to.equal(\"a3s-pipeline-test\");",
									"    pm.expect(jsonData.defaultConfigurations[0].applications[1].functions.length).to.equal(2);",
									"    ",
									"    ",
									"    // Check that expected application functions are in the returned array.",
									"    var result;",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.defaultConfigurations[0].applications[1].functions.length; loop++)",
									"    {",
									"        if (jsonData.defaultConfigurations[0].applications[1].functions[loop].name === \"a3s.TestPipeline.SuperAdmin\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"    ",
									"    result = false;",
									"    for (loop = 0; loop < jsonData.defaultConfigurations[0].applications[1].functions.length; loop++)",
									"    {",
									"        if (jsonData.defaultConfigurations[0].applications[1].functions[loop].name === \"a3s.TestPipeline.Reader\")",
									"        {",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured application level. Checking first application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.applications[0]).to.have.property('fullname');",
									"    pm.expect(jsonData.applications[0]).to.have.property('applicationFunctions');",
									"    pm.expect(jsonData.applications[0]).to.have.property('dataPolicies');",
									"});",
									"",
									"pm.test(\"Check that returned Security Contract has correctly structured default configurations level. Checking first default configuration.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('name');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('applications');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('roles');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('users');",
									"    pm.expect(jsonData.defaultConfigurations[0]).to.have.property('teams');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the default configuration that was created in the previous partial security contract upload."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Create Compound Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "defaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S-Pipeline-Test-Config\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s-pipeline-test\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.TestPipeline.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s-pipeline-test.test.read\n              - a3s-pipeline-test.test.create\n              - a3s-pipeline-test.test.update\n              - a3s-pipeline-test.test.archive\n          - name: \"a3s.TestPipeline.Reader\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s-pipeline-test.test.read\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Test Pipeline Super Admin\"\n        description: An A3S Test Pipeline Super Admin Role that has all the A3S test Pipeline functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.TestPipeline.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Test Pipeline Role for reading things..\n        functions:\n          - \"a3s.TestPipeline.Reader\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-test-pipeline-user\n        name: a3s-test-pipeline-user\n        surname: pipeline-test-surname\n        email: a3s-pipeline-test@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110117\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Test Pipeline Super Admin\"\n\n    teams:\n      - name: default-test-pipeline-team\n        description: A simple test default team.\n        users:\n          - a3s-test-pipeline-user\n      - name: default-test-pipeline-compound-team\n        description: A simple test default team.\n        teams:\n          - default-test-pipeline-team\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Create Compound Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that the new compound team has the correct child team.\", function () {",
									"    var jsonData = pm.response.json();",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.defaultConfigurations[0].teams.length; loop++)",
									"    {",
									"        if (jsonData.defaultConfigurations[0].teams[loop].name === \"default-test-pipeline-compound-team\")",
									"        {",
									"            if(jsonData.defaultConfigurations[0].teams[loop].teams[0] === \"default-test-pipeline-team\")",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the default configuration that was created in the previous partial security contract upload."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Create Compound Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "defaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S-Pipeline-Test-Config\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s-pipeline-test\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.TestPipeline.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s-pipeline-test.test.read\n              - a3s-pipeline-test.test.create\n              - a3s-pipeline-test.test.update\n              - a3s-pipeline-test.test.archive\n          - name: \"a3s.TestPipeline.Reader\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s-pipeline-test.test.read\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Test Pipeline Super Admin\"\n        description: An A3S Test Pipeline Super Admin Role that has all the A3S test Pipeline functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.TestPipeline.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Test Pipeline Role for reading things..\n        functions:\n          - \"a3s.TestPipeline.Reader\"\n      - name: \"Test-Compound-Role\"\n        description: An A3S Test Compound Role.\n        functions:\n          - \"a3s.TestPipeline.Reader\"\n        roles:\n          - \"A3S User Manager\"\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Test For Create Compound Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that the new compound role has the correct child role.\", function () {",
									"    var jsonData = pm.response.json();",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.defaultConfigurations[0].roles.length; loop++)",
									"    {",
									"        if (jsonData.defaultConfigurations[0].roles[loop].name === \"Test-Compound-Role\")",
									"        {",
									"            if(jsonData.defaultConfigurations[0].roles[loop].roles[0] === \"A3S User Manager\")",
									"            result=true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(true).to.eql(result);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. Note: YAML is the preferred returned format, but these requests are asking for JSON to be returned so that Postman content analysis is easier. Checks the default configuration that was created in the previous partial security contract upload."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Client with Custom ID and Access Token Lifetimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "clients:\n  - clientId: test-custom-lifetimes-client\n    name: \"Test security contract client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    identityTokenLifetime: 5000\n    accessTokenLifetime: 6000\n    allowedOfflineAccess: true\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Token - A3S Admin - Custom Access Token Lifetime Client - Expect Custom Access Token Expiry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Response is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that custome lifetime access token was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    ",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "test-custom-lifetimes-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "secret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				}
			],
			"description": "A collection of requests and tests pertaining to Security Contracts within A3S.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Permissions - Enforcement",
			"item": [
				{
					"name": "Get Access Token - A3S Bootsrap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-bootstrap-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "GetPermission - No Perms - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79ed00be-f9fd-4bae-bea1-2d2770806458",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions/{{permission-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions",
								"{{permission-guid}}"
							]
						},
						"description": "Gets a permissions by it's UUID. User should not have perms. Expect 403."
					},
					"response": []
				},
				{
					"name": "GetPermission By UUID  - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/permissions/{{permission-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"permissions",
								"{{permission-guid}}"
							]
						},
						"description": "Gets a permissions by it's UUID."
					},
					"response": []
				},
				{
					"name": "GetApplicationFunctions - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/applicationFunctions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"applicationFunctions"
							]
						},
						"description": "Gets a list of application functions from the API. User has no perms to access this function. Expect a 403 response."
					},
					"response": []
				},
				{
					"name": "GetApplications - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/applications",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"applications"
							]
						},
						"description": "Gets a list of applications from the API. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetFunctions - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Gets a list of functions from the API. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetFunction By UUID - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Gets a function by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "CreateFunction - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function\",\n    \"description\": \"test-function description\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Gets a permissions by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function's basic attributes and asserts that these were correctly updated. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetRoles - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Gets a list of roles from the API. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetRole By UUID - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Gets a role by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "CreateRole - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-new\",\n    \"description\" : \"test-new-role-description\",\n    \"userIds\": [\"{{user-guid}}\"],\n    \"functionIds\": [\"{{function-guid}}\"],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "Creates a new role. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "UpdateRole - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-role-updated\",\n    \"description\" : \"test-updated-role-description\",\n    \"functionIds\": [],\n    \"userIds\": [],\n    \"roleIds\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/roles/{{role-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"roles",
								"{{role-guid}}"
							]
						},
						"description": "Updates an existing role. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetLdapAuthenticationModes - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20d94a43-c28e-4490-8b9c-7ec9b84d802e",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap"
							]
						},
						"description": "Gets a list of LDAP authentication modes. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetLdapAuthenticationMode By UUID - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cac9b954-b8fd-45c2-87a9-09b7e5914256",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Gets an authentication mode by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "CreateLdapAuthenticationMode - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "107896b8-e3c5-40b7-a0d7-13e2c7b8ee3c",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"open-ldap-dev\",\n    \"hostName\": \"localhost\",\n    \"port\": 389,\n    \"isLdaps\": true,\n    \"account\": \"admin\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap"
							]
						},
						"description": "Creates a new LDAP authentication mode. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "UpdateLdapAuthenticationMode - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4655849a-3e70-4ec1-a4bb-36437c2544d8",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{authentication-mode-guid}}\",\n    \"name\": \"open-ldap-dev-updated\",\n    \"hostName\": \"localhost-updated\",\n    \"port\": 390,\n    \"isLdaps\": false,\n    \"account\": \"admin-updated\",\n    \"password\": \"admin\",\n    \"baseDn\": \"dc=bigbaobab-updated,dc=org\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/authenticationModes/ldap/{{authentication-mode-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"authenticationModes",
								"ldap",
								"{{authentication-mode-guid}}"
							]
						},
						"description": "Updates an authentication mode by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetUsers - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Gets a list of users from the API. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetUser By UUID - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Gets a user by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "CreateUser - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User First Name One\",\n\t\"surname\": \"New User Surname One\",\n\t\"email\": \"newone@emailadress.local\",\n\t\"phoneNumber\": \"+27110110110\",\n\t\"username\": \"new-user-name-one\",\n    \"roleIds\": [],\n    \"teamIds\": [],\n    \"avatar\": \"\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a new user. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "UpdateUser - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee9c8d0-83a3-425e-8903-655b7ccd9d63",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"uuid\": \"{{user-guid}}\",\n\t\"name\": \"Updated User First Name\",\n\t\"surname\": \"Updated User Surname\",\n\t\"email\": \"updated@emailadress.local\",\n\t\"phoneNumber\": \"+27110110119\",\n\t\"username\": \"updated-user-name\",\n    \"roleIds\": [\"{{role-guid}}\"],\n    \"teamIds\": [],\n    \"avatar\": \"dGVzdCB1cGRhdGVkIGF2YXRhcg==\"\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Gets a user by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "DeleteUser - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53ce2ba9-c674-47f1-ad6d-9229b08732b6",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/users/{{user-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"users",
								"{{user-guid}}"
							]
						},
						"description": "Deletes a user by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetTeams - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Gets a list of teams from the API. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetTeam By UUID - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541ee953-a2a5-40c6-983c-415bd7935897",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Gets a team by it's UUID. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "CreateTeam - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-new\",\n    \"description\" : \"test-new-team-description\",\n    \"userIds\": [\"{{user-guid}}\"],\n    \"teamIds\": [],\n    \"dataPolcies\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Creates a new team. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "UpdateTeam - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-team-updated\",\n    \"description\" : \"test-updated-team-description\",\n    \"userIds\": [],\n    \"teamIds\": [],\n    \"dataPolcies\": []\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/teams/{{team-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"teams",
								"{{team-guid}}"
							]
						},
						"description": "Updates an existing team. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "Get Access Token - User1 - Has no Security Contract Perms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-user1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S user 1, which does not have any permissions to access security contract APIs."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "applications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s-pipeline-test   \n    applicationFunctions:\n      - name: a3s.pipelineTestFunction1\n        description: Test function one for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.read\n            description: Read test permission.\n          - name: a3s-pipeline-test.test.create\n            description: Create test permission.\n      - name: a3s.pipelineTestFunction2\n        description: Test function two for pipeline test.\n        permissions:\n          - name: a3s-pipeline-test.test.update\n            description: Update test permission.\n          - name: a3s-pipeline-test.test.archive\n            description: Archive test permission.\n    dataPolicies:\n      - name: a3s-pipeline-test.dataPolicy\n        description: Test data policy description.\n            "
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Update or Apply a security contract. User has no permissions to access this function, expect a 403."
					},
					"response": []
				},
				{
					"name": "GetSecurityContractDefinition - Expect 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77f72596-003e-4637-8428-c3bcd38a88b6",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-yaml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						},
						"description": "Retrieves the entire security contract. User has no permissions to access this function, expect a 403."
					},
					"response": []
				}
			],
			"description": "Makes requests to all non-security contract API routes, with a user that only has Security Contract uploading permissions.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Multi-application consistency",
			"item": [
				{
					"name": "Get Access Token - A3S Bootsrap Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-bootstrap-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-yaml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "--- \napplications: \n  - \n    applicationFunctions: \n      - \n        description: \"Functionality to maintain breadcrumbs within breadmaker.\"\n        name: breadmaker.crumbs\n        permissions: \n          - \n            description: \"View a list of crumbs.\"\n            name: breadmaker.crumbs.read\n          - \n            description: \"Create a new crumb.\"\n            name: breadmaker.crumbs.create\n          - \n            description: \"Removes a crumb.\"\n            name: breadmaker.crumbs.delete\n          - \n            description: \"Updates a crumb\\\\.\"\n            name: breadmaker.crumbs.update\n    fullname: breadmaker\nclients: \n  - \n    allowedCorsOrigins: \n      - \"https://www.getpostman.com\"\n    allowedGrantTypes: \n      - authorization_code\n      - password\n    allowedOfflineAccess: true\n    allowedScopes: \n      - bread-baker\n      - a3s\n    clientId: bread-knife\n    clientSecrets: \n      - secret\n    name: \"Bread Knife\"\n    postLogoutRedirectUris: \n      - \"https://www.getpostman.com\"\n    redirectUris: \n      - \"https://www.getpostman.com/oauth2/callback\"\ndefaultConfigurations: \n  - \n    applications: \n      - \n        functions: \n          - \n            description: \"A function that contains all possible permissions within breadmaker.\"\n            name: breadmaker.baker\n            permissions: \n              - breadmaker.crumbs.read\n              - breadmaker.crumbs.create\n              - breadmaker.crumbs.update\n              - breadmaker.crumbs.delete\n        name: breadmaker\n    name: \"Breadmaker Default configuration\"\n    roles: \n      - \n        description: \"An Breadmaker Role that has all the Breadmaker functions associated with it.\"\n        functions: \n          - breadmaker.baker\n        name: \"Breadmaker Baker Role\"\n    teams: \n      - \n        description: \"A simple test defaul team.\"\n        name: default-team\n        users: \n          - breadmaker-admin\n    users: \n      - \n        email: breadmaker-admin@localhost\n        name: breadmaker-admin\n        password: \"Password1#\"\n        phoneNumber: \"+27110110110\"\n        roles: \n          - \"Breadmaker Baker Role\"\n        surname: \"system user\"\n        username: breadmaker-admin\ngenerated: 2020-01-06 10:00:00 +02:00\nname: \"Breadmaker Security Contract\"\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Token - A3S Admin - Authed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Response is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "GetApplications - Get the new breadmaker application",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that applications are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('functions');",
									"});",
									"",
									"pm.test(\"Check that application has correctly structures associated functions in the first element of the returned list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that application functions have correctly structured associated permissions within the first element of the returned list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Get the newly created breadmaker application.\", function () {",
									"    var jsonData = pm.response.json();",
									"    var loop;",
									"    for (loop = 0; loop < jsonData.length; loop++)",
									"    {",
									"        if (jsonData[loop].name === \"breadmaker\")",
									"        {",
									"            pm.environment.set(\"application-guid\", jsonData[loop].uuid);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/applications",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"applications"
							]
						},
						"description": "Gets a list of applications from the API."
					},
					"response": []
				},
				{
					"name": "CreateFunction - Supply unrelated application and permission - expecting 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - Entity Not Processable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function new unrelated application and permission\",\n    \"description\": \"test-function description new\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							]
						},
						"description": "Creates a new function and attempting to link it's permissions to an unrelated permission, resulting in a 422 - unprocessable."
					},
					"response": []
				},
				{
					"name": "GetFunctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that the first element of the list is a correctly structured function\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('description');",
									"    pm.expect(jsonData[0]).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that the first element of the list is a function with correctly structured associated permissions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].permissions[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment function UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"function-guid\", jsonData[0].uuid);",
									"});    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/functions?includeRelations=true",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions"
							],
							"query": [
								{
									"key": "includeRelations",
									"value": "true"
								}
							]
						},
						"description": "Gets a list of functions from the API. Three were expected to be created with the earlier application of the security contract. Three element list is expected."
					},
					"response": []
				},
				{
					"name": "UpdateFunction - Supply unrelated application and permission - expecting 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is 422 - Entity Not Processable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-function updated unrelated application and permission\",\n    \"uuid\": \"{{function-guid}}\",\n    \"description\": \"test-function description updated\",\n    \"applicationId\": \"{{application-guid}}\",\n    \"permissions\": [\"{{permission-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/functions/{{function-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"functions",
								"{{function-guid}}"
							]
						},
						"description": "Updates an existing function by attempting to link it's permissions to an unrelated permission, resulting in a 422 - unprocessable."
					},
					"response": []
				}
			],
			"description": "This tests the ability to apply a second security contract that is a separate application from the initial security contract, and the successful co-existence of of unrelated sub items.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5ac68ca3-7248-4e41-b9be-76ac8ef7cd03",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a79f97d3-9f4f-4204-8a36-5d141d18ec3f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Security Contract Concurrency",
			"item": [
				{
					"name": "Get Access Token - A3S Bootsrap Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
								"exec": [
									"pm.test(\"Set session_access_token environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "a3s-bootstrap-admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Password1#",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client-secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "a3s",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth-server-base-url}}/connect/token",
							"host": [
								"{{auth-server-base-url}}"
							],
							"path": [
								"connect",
								"token"
							]
						},
						"description": "Obtains an access token for the A3S Bootstrap admin user, which only has permissions to apply Security Contract definitions."
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition Attempt 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-yaml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# A3S Security Contract\n#\n# This file contains information allowing for configuration and declaration of almost all aspects of A3S.\n# More information at: https://github.com/GrindrodBank/A3S/blob/master/doc/security-contracts.md\n#\nname: A3S Security Contract\ngenerated: 2019-10-30 10:00:00 +02:00\napplications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s   \n    applicationFunctions:\n      - name: a3s.users\n        description: Functionality to maintain users within the A3S User store.\n        permissions:\n          - name: a3s.users.read\n            description: View a list of users or a single user.\n          - name: a3s.users.create\n            description: Create a new user. Enables assigning roles to newly created users.\n          - name: a3s.users.delete\n            description: Removes a user, but only from the A3S User store.\n          - name: a3s.users.update\n            description: Updates a user. Also enables modifying roles assigned to the user.\n\n      - name: a3s.teams\n        description: Functionality to maintain teams.\n        permissions:\n          - name: a3s.teams.read\n            description: View list of teams. View a single team.\n          - name: a3s.teams.create\n            description: Create a new team. Grants ability to assign users to this team.\n          - name: a3s.teams.delete\n            description: Remove a team.\n          - name: a3s.teams.update\n            description: Update a team. Change which users are assigned to the team.\n\n      - name: a3s.roles\n        description: Functionality to manage roles and the functions assigned to roles.\n        permissions:\n          - name: a3s.roles.read\n            description: Enables reading lists of roles and individual roles.\n          - name: a3s.roles.create\n            description: Enables creation of roles. Enables assignment of functions to the created role.\n          - name: a3s.roles.delete\n            description: Enables deletion of a role.\n          - name: a3s.roles.update\n            description: Enables updating of a role. Enables updating of functions assinged to a role.\n\n      - name: a3s.applications\n        description: Functionality to manage applications within A3S.\n        permissions:\n          - name: a3s.applications.read\n            description: Enables reading lists of applications and individual applications. Enables viewing which functions and permissions are assigned to applications.\n\n      - name: a3s.clients\n        description: Functionality to manage clients within A3S.\n        permissions:\n          - name: a3s.clients.read\n            description: Enables reading lists of clients and individual clients.\n\n      - name: a3s.functions\n        description: Functionality to manage functions created by micro-services.\n        permissions:\n          - name: a3s.functions.read\n            description: Enables reading lists of functions, individual functions and the lists of permissions assigned to functions.\n          - name: a3s.functions.create\n            description: Enables the creation of new functions and the assignment of permissions to these functions.\n          - name: a3s.functions.update\n            description: Enables the updating of existing functions. Enables editing the permissions that are assigned to a function.\n          - name: a3s.functions.delete\n            description: Enables the deletion of functions.\n\n      - name: a3s.authenticationModes\n        description: Functionality to maintain authentication modes.\n        permissions:\n          - name: a3s.ldapAuthenticationModes.read\n            description: View list of authentication modes. View a single authentication mode.\n          - name: a3s.ldapAuthenticationModes.create\n            description: Create a new authentication mode.\n          - name: a3s.ldapAuthenticationModes.delete\n            description: Remove an authentication mode.\n          - name: a3s.ldapAuthenticationModes.update\n            description: Update an authentication mode.\n\n      - name: a3s.applicationFunctions\n        description: Functionality to manage application functions created by micro-services.\n        permissions:\n          - name: a3s.applicationFunctions.read\n            description: Enables reading lists of application functions, individual application functions and the lists of permissions assigned to application functions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove applications functions directly via the API is prohibited. These operations are only permitted in the context of security contract application (this document).\n            \n      - name: a3s.permissions\n        description: Functionality to manage permissions created by micro-services.\n        permissions:\n          - name: a3s.permissions.read\n            description: Enables reading lists of permissions and individual permissions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove permissions directly via the API is prohibited. These operations are only permitted in the context of security contract application.\n      - name: a3s.securityContracts\n        description: Functionality to apply security contracts for micro-services.\n        permissions:\n          - name: a3s.securityContracts.read\n            description: Enables fetching of a security contract definition.\n          - name: a3s.securityContracts.update\n            description: Enables idempotently applying (creating or updating) a security contract definition. This includes creation or updating of permissions, functions, applications and the relationships between them.\n\n      - name: a3s.clientRegistration\n        description: Functionality to create and update Oauth2.0 and Openid Connect clients.\n        permissions:\n          - name: a3s.clientRegistration.update\n            description: Enables idempotently applying (creating or updating) a client definition.\n\n      - name: a3s.twoFactorAuth\n        description: Functionality to update two-factor authentication configuration.\n        permissions:\n          - name: a3s.twoFactorAuth.remove\n            description: Removes two-factor authentication from a user profile.\n          - name: a3s.twoFactorAuth.validateOtp\n            description: Validates a user authenticator generated OTP.\n\n      - name: a3s.termsOfService\n        description: Functionality to manage terms of service entries.\n        permissions:\n          - name: a3s.termsOfService.read\n            description: Enables reading lists or individual entries of terms of service.\n          - name: a3s.termsOfService.create\n            description: Enables the creation of new terms of service entries.\n          - name: a3s.termsOfService.delete\n            description: Enables the delete of existing terms of service entries.\n\n    dataPolicies:\n      - name: a3s.viewYourTeamsOnly\n        description: Will only return teams that the accessing user is part of when retrieving lists of teams from the API\n\nclients:\n  - clientId: test-client-api\n    name: \"Test client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n\n\ndefaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S Default configuration\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.teams.read\n              - a3s.teams.create\n              - a3s.teams.update\n              - a3s.teams.delete\n              - a3s.roles.read\n              - a3s.roles.create\n              - a3s.roles.update\n              - a3s.roles.delete\n              - a3s.applications.read\n              - a3s.clients.read\n              - a3s.functions.read\n              - a3s.functions.create\n              - a3s.functions.update\n              - a3s.functions.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.applicationFunctions.read\n              - a3s.permissions.read\n              - a3s.securityContracts.update\n              - a3s.securityContracts.read\n              - a3s.clientRegistration.update\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n              - a3s.termsOfService.create\n              - a3s.termsOfService.delete\n              - a3s.termsOfService.read\n          - name: \"a3s.userMaintenance\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n          - name: \"a3s.securityContractMaintenance\"\n            description: \"Functionality to apply security contracts for micro-services.\"\n            permissions:\n              - a3s.securityContracts.read\n              - a3s.securityContracts.update\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Super Admin\"\n        description: An A3S Role that has all the A3S functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Role for managing users.\n        functions:\n          - \"a3s.userMaintenance\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-admin\n        name: a3s-admin\n        surname: system user\n        email: a3s-admin@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110110\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Super Admin\"\n      - username: a3s-user1\n        name: a3s user 1\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user1@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n\n    teams:\n      - name: default-team\n        description: A simple test defaul team.\n        users:\n          - a3s-admin\n          - a3s-user1\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition Attempt 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-yaml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# A3S Security Contract\n#\n# This file contains information allowing for configuration and declaration of almost all aspects of A3S.\n# More information at: https://github.com/GrindrodBank/A3S/blob/master/doc/security-contracts.md\n#\nname: A3S Security Contract\ngenerated: 2019-10-30 10:00:00 +02:00\napplications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s   \n    applicationFunctions:\n      - name: a3s.users\n        description: Functionality to maintain users within the A3S User store.\n        permissions:\n          - name: a3s.users.read\n            description: View a list of users or a single user.\n          - name: a3s.users.create\n            description: Create a new user. Enables assigning roles to newly created users.\n          - name: a3s.users.delete\n            description: Removes a user, but only from the A3S User store.\n          - name: a3s.users.update\n            description: Updates a user. Also enables modifying roles assigned to the user.\n\n      - name: a3s.teams\n        description: Functionality to maintain teams.\n        permissions:\n          - name: a3s.teams.read\n            description: View list of teams. View a single team.\n          - name: a3s.teams.create\n            description: Create a new team. Grants ability to assign users to this team.\n          - name: a3s.teams.delete\n            description: Remove a team.\n          - name: a3s.teams.update\n            description: Update a team. Change which users are assigned to the team.\n\n      - name: a3s.roles\n        description: Functionality to manage roles and the functions assigned to roles.\n        permissions:\n          - name: a3s.roles.read\n            description: Enables reading lists of roles and individual roles.\n          - name: a3s.roles.create\n            description: Enables creation of roles. Enables assignment of functions to the created role.\n          - name: a3s.roles.delete\n            description: Enables deletion of a role.\n          - name: a3s.roles.update\n            description: Enables updating of a role. Enables updating of functions assinged to a role.\n\n      - name: a3s.applications\n        description: Functionality to manage applications within A3S.\n        permissions:\n          - name: a3s.applications.read\n            description: Enables reading lists of applications and individual applications. Enables viewing which functions and permissions are assigned to applications.\n\n      - name: a3s.clients\n        description: Functionality to manage clients within A3S.\n        permissions:\n          - name: a3s.clients.read\n            description: Enables reading lists of clients and individual clients.\n\n      - name: a3s.functions\n        description: Functionality to manage functions created by micro-services.\n        permissions:\n          - name: a3s.functions.read\n            description: Enables reading lists of functions, individual functions and the lists of permissions assigned to functions.\n          - name: a3s.functions.create\n            description: Enables the creation of new functions and the assignment of permissions to these functions.\n          - name: a3s.functions.update\n            description: Enables the updating of existing functions. Enables editing the permissions that are assigned to a function.\n          - name: a3s.functions.delete\n            description: Enables the deletion of functions.\n\n      - name: a3s.authenticationModes\n        description: Functionality to maintain authentication modes.\n        permissions:\n          - name: a3s.ldapAuthenticationModes.read\n            description: View list of authentication modes. View a single authentication mode.\n          - name: a3s.ldapAuthenticationModes.create\n            description: Create a new authentication mode.\n          - name: a3s.ldapAuthenticationModes.delete\n            description: Remove an authentication mode.\n          - name: a3s.ldapAuthenticationModes.update\n            description: Update an authentication mode.\n\n      - name: a3s.applicationFunctions\n        description: Functionality to manage application functions created by micro-services.\n        permissions:\n          - name: a3s.applicationFunctions.read\n            description: Enables reading lists of application functions, individual application functions and the lists of permissions assigned to application functions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove applications functions directly via the API is prohibited. These operations are only permitted in the context of security contract application (this document).\n            \n      - name: a3s.permissions\n        description: Functionality to manage permissions created by micro-services.\n        permissions:\n          - name: a3s.permissions.read\n            description: Enables reading lists of permissions and individual permissions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove permissions directly via the API is prohibited. These operations are only permitted in the context of security contract application.\n      - name: a3s.securityContracts\n        description: Functionality to apply security contracts for micro-services.\n        permissions:\n          - name: a3s.securityContracts.read\n            description: Enables fetching of a security contract definition.\n          - name: a3s.securityContracts.update\n            description: Enables idempotently applying (creating or updating) a security contract definition. This includes creation or updating of permissions, functions, applications and the relationships between them.\n\n      - name: a3s.clientRegistration\n        description: Functionality to create and update Oauth2.0 and Openid Connect clients.\n        permissions:\n          - name: a3s.clientRegistration.update\n            description: Enables idempotently applying (creating or updating) a client definition.\n\n      - name: a3s.twoFactorAuth\n        description: Functionality to update two-factor authentication configuration.\n        permissions:\n          - name: a3s.twoFactorAuth.remove\n            description: Removes two-factor authentication from a user profile.\n          - name: a3s.twoFactorAuth.validateOtp\n            description: Validates a user authenticator generated OTP.\n\n      - name: a3s.termsOfService\n        description: Functionality to manage terms of service entries.\n        permissions:\n          - name: a3s.termsOfService.read\n            description: Enables reading lists or individual entries of terms of service.\n          - name: a3s.termsOfService.create\n            description: Enables the creation of new terms of service entries.\n          - name: a3s.termsOfService.delete\n            description: Enables the delete of existing terms of service entries.\n\n    dataPolicies:\n      - name: a3s.viewYourTeamsOnly\n        description: Will only return teams that the accessing user is part of when retrieving lists of teams from the API\n\nclients:\n  - clientId: test-client-api\n    name: \"Test client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n\n\ndefaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S Default configuration\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.teams.read\n              - a3s.teams.create\n              - a3s.teams.update\n              - a3s.teams.delete\n              - a3s.roles.read\n              - a3s.roles.create\n              - a3s.roles.update\n              - a3s.roles.delete\n              - a3s.applications.read\n              - a3s.clients.read\n              - a3s.functions.read\n              - a3s.functions.create\n              - a3s.functions.update\n              - a3s.functions.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.applicationFunctions.read\n              - a3s.permissions.read\n              - a3s.securityContracts.update\n              - a3s.securityContracts.read\n              - a3s.clientRegistration.update\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n              - a3s.termsOfService.create\n              - a3s.termsOfService.delete\n              - a3s.termsOfService.read\n          - name: \"a3s.userMaintenance\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n          - name: \"a3s.securityContractMaintenance\"\n            description: \"Functionality to apply security contracts for micro-services.\"\n            permissions:\n              - a3s.securityContracts.read\n              - a3s.securityContracts.update\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Super Admin\"\n        description: An A3S Role that has all the A3S functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Role for managing users.\n        functions:\n          - \"a3s.userMaintenance\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-admin\n        name: a3s-admin\n        surname: system user\n        email: a3s-admin@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110110\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Super Admin\"\n      - username: a3s-user1\n        name: a3s user 1\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user1@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n\n    teams:\n      - name: default-team\n        description: A simple test defaul team.\n        users:\n          - a3s-admin\n          - a3s-user1\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PutSecurityContractDefinition Attempt 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53f866e8-5434-4e46-8610-dbe1c3781067",
								"exec": [
									"pm.test(\"Response is OK - 204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-yaml",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "# A3S Security Contract\n#\n# This file contains information allowing for configuration and declaration of almost all aspects of A3S.\n# More information at: https://github.com/GrindrodBank/A3S/blob/master/doc/security-contracts.md\n#\nname: A3S Security Contract\ngenerated: 2019-10-30 10:00:00 +02:00\napplications:\n    # This value will be used to create the client scope within the Identoity Server. Therfore, it cannot contain any spaces, and should follow a fully smaller case convention.\n    # Perhaps we should add an explicit attribute to an application to model it's 'client-scope', making it independent from the name.\n  - fullname: a3s   \n    applicationFunctions:\n      - name: a3s.users\n        description: Functionality to maintain users within the A3S User store.\n        permissions:\n          - name: a3s.users.read\n            description: View a list of users or a single user.\n          - name: a3s.users.create\n            description: Create a new user. Enables assigning roles to newly created users.\n          - name: a3s.users.delete\n            description: Removes a user, but only from the A3S User store.\n          - name: a3s.users.update\n            description: Updates a user. Also enables modifying roles assigned to the user.\n\n      - name: a3s.teams\n        description: Functionality to maintain teams.\n        permissions:\n          - name: a3s.teams.read\n            description: View list of teams. View a single team.\n          - name: a3s.teams.create\n            description: Create a new team. Grants ability to assign users to this team.\n          - name: a3s.teams.delete\n            description: Remove a team.\n          - name: a3s.teams.update\n            description: Update a team. Change which users are assigned to the team.\n\n      - name: a3s.roles\n        description: Functionality to manage roles and the functions assigned to roles.\n        permissions:\n          - name: a3s.roles.read\n            description: Enables reading lists of roles and individual roles.\n          - name: a3s.roles.create\n            description: Enables creation of roles. Enables assignment of functions to the created role.\n          - name: a3s.roles.delete\n            description: Enables deletion of a role.\n          - name: a3s.roles.update\n            description: Enables updating of a role. Enables updating of functions assinged to a role.\n\n      - name: a3s.applications\n        description: Functionality to manage applications within A3S.\n        permissions:\n          - name: a3s.applications.read\n            description: Enables reading lists of applications and individual applications. Enables viewing which functions and permissions are assigned to applications.\n\n      - name: a3s.clients\n        description: Functionality to manage clients within A3S.\n        permissions:\n          - name: a3s.clients.read\n            description: Enables reading lists of clients and individual clients.\n\n      - name: a3s.functions\n        description: Functionality to manage functions created by micro-services.\n        permissions:\n          - name: a3s.functions.read\n            description: Enables reading lists of functions, individual functions and the lists of permissions assigned to functions.\n          - name: a3s.functions.create\n            description: Enables the creation of new functions and the assignment of permissions to these functions.\n          - name: a3s.functions.update\n            description: Enables the updating of existing functions. Enables editing the permissions that are assigned to a function.\n          - name: a3s.functions.delete\n            description: Enables the deletion of functions.\n\n      - name: a3s.authenticationModes\n        description: Functionality to maintain authentication modes.\n        permissions:\n          - name: a3s.ldapAuthenticationModes.read\n            description: View list of authentication modes. View a single authentication mode.\n          - name: a3s.ldapAuthenticationModes.create\n            description: Create a new authentication mode.\n          - name: a3s.ldapAuthenticationModes.delete\n            description: Remove an authentication mode.\n          - name: a3s.ldapAuthenticationModes.update\n            description: Update an authentication mode.\n\n      - name: a3s.applicationFunctions\n        description: Functionality to manage application functions created by micro-services.\n        permissions:\n          - name: a3s.applicationFunctions.read\n            description: Enables reading lists of application functions, individual application functions and the lists of permissions assigned to application functions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove applications functions directly via the API is prohibited. These operations are only permitted in the context of security contract application (this document).\n            \n      - name: a3s.permissions\n        description: Functionality to manage permissions created by micro-services.\n        permissions:\n          - name: a3s.permissions.read\n            description: Enables reading lists of permissions and individual permissions.\n        # Note: Only read permissions are specified here. The ability to create, update or remove permissions directly via the API is prohibited. These operations are only permitted in the context of security contract application.\n      - name: a3s.securityContracts\n        description: Functionality to apply security contracts for micro-services.\n        permissions:\n          - name: a3s.securityContracts.read\n            description: Enables fetching of a security contract definition.\n          - name: a3s.securityContracts.update\n            description: Enables idempotently applying (creating or updating) a security contract definition. This includes creation or updating of permissions, functions, applications and the relationships between them.\n\n      - name: a3s.clientRegistration\n        description: Functionality to create and update Oauth2.0 and Openid Connect clients.\n        permissions:\n          - name: a3s.clientRegistration.update\n            description: Enables idempotently applying (creating or updating) a client definition.\n\n      - name: a3s.twoFactorAuth\n        description: Functionality to update two-factor authentication configuration.\n        permissions:\n          - name: a3s.twoFactorAuth.remove\n            description: Removes two-factor authentication from a user profile.\n          - name: a3s.twoFactorAuth.validateOtp\n            description: Validates a user authenticator generated OTP.\n\n      - name: a3s.termsOfService\n        description: Functionality to manage terms of service entries.\n        permissions:\n          - name: a3s.termsOfService.read\n            description: Enables reading lists or individual entries of terms of service.\n          - name: a3s.termsOfService.create\n            description: Enables the creation of new terms of service entries.\n          - name: a3s.termsOfService.delete\n            description: Enables the delete of existing terms of service entries.\n\n    dataPolicies:\n      - name: a3s.viewYourTeamsOnly\n        description: Will only return teams that the accessing user is part of when retrieving lists of teams from the API\n\nclients:\n  - clientId: test-client-api\n    name: \"Test client\"\n    allowedGrantTypes:\n      - authorization_code\n      - password\n    redirectUris:\n      - \"https://www.getpostman.com/oauth2/callback\"\n    postLogoutRedirectUris:\n      - \"https://www.getpostman.com\"\n    allowedCorsOrigins:\n      - \"https://www.getpostman.com\"\n    allowedScopes:\n      - \"openid\"\n      - \"profile\"\n      - \"dokuti\"\n      - \"a3s\"\n    clientSecrets:\n      - \"secret\"\n    allowedOfflineAccess: true\n\n\ndefaultConfigurations:\n    # The name here is purely for human readability and separating the default configurations into logical components.\n  - name: A3S Default configuration\n\n    # Section to configure the default state of applications with respect to any business functions that need to be configured.\n    applications:\n        # The name of the application. This must already exist or be defined in the 'applications' section of this document. If not found, it will be ignored.\n      - name: a3s\n        # Default 'Business' functions that are to be created. Note: These are different from 'applicationFunctions' created in the 'applications' section of this document.\n        functions:\n            # Create a 'super admin' business function that contains all the possible application permissions.\n          - name: \"a3s.SuperAdmin\"\n            description: \"A function that contains all possible permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.teams.read\n              - a3s.teams.create\n              - a3s.teams.update\n              - a3s.teams.delete\n              - a3s.roles.read\n              - a3s.roles.create\n              - a3s.roles.update\n              - a3s.roles.delete\n              - a3s.applications.read\n              - a3s.clients.read\n              - a3s.functions.read\n              - a3s.functions.create\n              - a3s.functions.update\n              - a3s.functions.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.applicationFunctions.read\n              - a3s.permissions.read\n              - a3s.securityContracts.update\n              - a3s.securityContracts.read\n              - a3s.clientRegistration.update\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n              - a3s.termsOfService.create\n              - a3s.termsOfService.delete\n              - a3s.termsOfService.read\n          - name: \"a3s.userMaintenance\"\n            description: \"A function that contains all user related permissions within the A3S micro-service.\"\n            permissions:\n              - a3s.users.read\n              - a3s.users.create\n              - a3s.users.update\n              - a3s.users.delete\n              - a3s.ldapAuthenticationModes.read\n              - a3s.ldapAuthenticationModes.create\n              - a3s.ldapAuthenticationModes.update\n              - a3s.ldapAuthenticationModes.delete\n              - a3s.twoFactorAuth.remove\n              - a3s.twoFactorAuth.validateOtp\n          - name: \"a3s.securityContractMaintenance\"\n            description: \"Functionality to apply security contracts for micro-services.\"\n            permissions:\n              - a3s.securityContracts.read\n              - a3s.securityContracts.update\n    # Default Roles to be created. Contains the functions that will be assigned to the Roles.\n    roles:\n      - name: \"A3S Super Admin\"\n        description: An A3S Role that has all the A3S functions associated with it.\n        # The server will attempt to assign these 'business' functions to the role. If the function does not exists, it will NOT be created, and will be simply NOT assigned to the Role. \n        functions:\n          - \"a3s.SuperAdmin\"\n      - name: \"A3S User Manager\"\n        description: An A3S Role for managing users.\n        functions:\n          - \"a3s.userMaintenance\"\n    # Defines a section for declaring new users and mapping roles to them.\n    users:\n      - username: a3s-admin\n        name: a3s-admin\n        surname: system user\n        email: a3s-admin@localhost\n        # Note: Passwords require at least one capital, one number and one non-alpha-numeric character.\n        password: \"Password1#\"\n        phoneNumber: \"+27110110110\"\n        # The roles in this list will be assigned to the user. If the roles don't exist, they will NOT be created and will simply be ignored.\n        roles:\n          - \"A3S Super Admin\"\n      - username: a3s-user1\n        name: a3s user 1\n        phoneNumber: \"+27110110112\"\n        surname: some surname\n        email: a3s-user1@localhost\n        password: \"Password1#\"\n        roles:\n          - \"A3S User Manager\"\n\n    teams:\n      - name: default-team\n        description: A simple test defaul team.\n        users:\n          - a3s-admin\n          - a3s-user1\n"
						},
						"url": {
							"raw": "{{a3s-host}}/securityContracts",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"securityContracts"
							]
						}
					},
					"response": []
				}
			],
			"description": "These tests are designed to test successful concurrent import of a security contract.\n\nAlthough Postman and Newman does not support concurrent runs natively, one can start multiple Postman Runners, or launch multiple concurrent Newman instances with this folder to test this.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d3e69aba-f00a-4c97-b09b-4e5cccc35bf6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ecc3fe50-d395-4aa4-b606-4704ce46c560",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sub-Realms",
			"item": [
				{
					"name": "Access Token - Admin User",
					"item": [
						{
							"name": "Get Access Token - A3S Admin - Password Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token from the API using the 'password' grant type. The default user credentials that populate the body of this request are those of the 'bootstrap-admin' user, which is designed to be used purely as a user for applying the initial security contract within the 'SecurityContracts' folder. The user's created when the security contract is applied have been created to have the same credentials, except their usernames, so this request body can easily be updated to fetch tokens for any of the users that are created when the security contract is applied."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GetApplications - Set Up Sub-Realm Env Vars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that applications are correctly structured in the first element of the repsonse.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0]).to.have.property('functions');",
									"});",
									"",
									"pm.test(\"Check that application has correctly structures associated functions in the first element of the returned list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('description');",
									"    pm.expect(jsonData[0].functions[0]).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that application functions have correctly structured associated permissions within the first element of the returned list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('uuid');",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].functions[0].permissions[0]).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Set environment application UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"application-subrealm-guid\", jsonData[0].uuid);",
									"});",
									"",
									"pm.test(\"Set environment permissions UUID to UUID of first element of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"permission-subrealm-guid\", jsonData[0].functions[0].permissions[0].uuid);",
									"});",
									"",
									"pm.test(\"Set environment data policies UUID to UUID of first data-policy of retrieved list.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"application-data-policy-subrealm-guid\", jsonData[0].dataPolicies[0].uuid);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{a3s-host}}/applications?filterName=a3s",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"applications"
							],
							"query": [
								{
									"key": "filterName",
									"value": "a3s"
								}
							]
						},
						"description": "Gets a list of applications from the API, but extracts certain permissions and application data policies returned in the response as sets them as env vars for later use."
					},
					"response": []
				},
				{
					"name": "CreateSubRealm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set profile GUID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"sub-realm-guid\", jsonData.uuid);",
									"});",
									"",
									"pm.test(\"Check that sub-realm is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('applicationDataPolicies');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-sub-realm-new\",\n    \"description\": \"Test new sub-realm description\",\n    \"permissionIds\": [\"{{permission-subrealm-guid}}\"],\n    \"applicationDataPolicyIds\": [\"{{application-data-policy-subrealm-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/subrealms",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"subrealms"
							]
						},
						"description": "Creates a new sub-realm."
					},
					"response": []
				},
				{
					"name": "GetSubRealm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
								"exec": [
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Set profile GUID environment variable.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.environment.set(\"sub-realm-guid\", jsonData.uuid);",
									"});",
									"",
									"pm.test(\"Check that sub-realm is correctly structured.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uuid');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('applicationDataPolicies');",
									"    pm.expect(jsonData).to.have.property('permissions');",
									"});",
									"",
									"pm.test(\"Check that the correct sub-realm was returned.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.uuid).to.eql(pm.environment.get('sub-realm-guid'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{session_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test-sub-realm-new\",\n    \"description\": \"Test new sub-realm description\",\n    \"permissionIds\": [\"{{permission-subrealm-guid}}\"],\n    \"applicationDataPolicyIds\": [\"{{application-data-policy-subrealm-guid}}\"]\n}"
						},
						"url": {
							"raw": "{{a3s-host}}/subrealms/{{sub-realm-guid}}",
							"host": [
								"{{a3s-host}}"
							],
							"path": [
								"subrealms",
								"{{sub-realm-guid}}"
							]
						},
						"description": "Gets a sub-realm by it's UUID."
					},
					"response": []
				}
			],
			"description": "Stores all the integration tests pertaining to the testing of sub-realms.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserProfiles",
			"item": [
				{
					"name": "Preparation",
					"item": [
						{
							"name": "CreateFunctionWithinSubRealm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set function GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"function-subrealm-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-function-subrealm\",\n    \"description\": \"test-function description subrealm\",\n    \"applicationId\": \"{{application-subrealm-guid}}\",\n    \"permissions\": [\"{{permission-subrealm-guid}}\"],\n    \"subRealmId\": \"{{sub-realm-guid}}\"\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/functions",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									]
								},
								"description": "Creates a new function, that is contained within a sub-realm."
							},
							"response": []
						},
						{
							"name": "CreateRoleWithinSubRealm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"role-subrealm-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new-subrealmed\",\n    \"description\": \"Test new role description\",\n    \"functionIds\": [\"{{function-subrealm-guid}}\"],\n    \"subRealmId\": \"{{sub-realm-guid}}\",\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creates a new role, which is contained within a sub-realm."
							},
							"response": []
						},
						{
							"name": "CreateTeamWithinSubRealm",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "107896b8-e3c5-40b7-a0d7-13e2c7b8ee3c",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"team-subrealm-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-team-new-subrealm\",\n    \"description\": \"test new team description - subrealmed\",\n    \"subRealmId\": \"{{sub-realm-guid}}\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [\"{{application-data-policy-subrealm-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/teams",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									]
								},
								"description": "Creates a new team, confined to a sub-realm."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "CreateUserProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17701951-d606-4279-9b65-a0c54763335f",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"profile-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"New User Profile Name\",\n\t\"description\": \"New User Profile description\",\n\t\"subRealmId\": \"{{sub-realm-guid}}\",\n\t\"roleIds\": [\"{{role-subrealm-guid}}\"],\n\t\"teamIds\": [\"{{team-subrealm-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									]
								},
								"description": "Creates a new user profile."
							},
							"response": []
						},
						{
							"name": "GetUserProfilesListForUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17701951-d606-4279-9b65-a0c54763335f",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									]
								},
								"description": "Gets a paginated list of user profiles with all the pagination query params set to their defaults."
							},
							"response": []
						},
						{
							"name": "GetUserProfileByProfileGuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17701951-d606-4279-9b65-a0c54763335f",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that user-profile is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('subRealmId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles/{{profile-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles",
										"{{profile-guid}}"
									]
								},
								"description": "Gets a user profile by it's GUID."
							},
							"response": []
						},
						{
							"name": "UpdateUserProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17701951-d606-4279-9b65-a0c54763335f",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that user-profile is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('subRealmId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"User Profile Name - Updated\",\n\t\"description\": \"User Profile description - updated\",\n\t\"subRealmId\": \"{{sub-realm-guid}}\",\n\t\"roleIds\": [\"{{role-subrealm-guid}}\"],\n\t\"teamIds\": [\"{{team-subrealm-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles/{{profile-guid}}",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles",
										"{{profile-guid}}"
									]
								},
								"description": "Updates a user profile identified by it's GUID."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pagination Preparation",
					"item": [
						{
							"name": "CreateSubRealm for pagination test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"sub-realm-guid\", jsonData.uuid);",
											"});",
											"",
											"pm.test(\"Check that sub-realm is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('applicationDataPolicies');",
											"    pm.expect(jsonData).to.have.property('permissions');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-sub-realm-new-pagination\",\n    \"description\": \"Test new sub-realm description\",\n    \"permissionIds\": [\"{{permission-subrealm-guid}}\"],\n    \"applicationDataPolicyIds\": [\"{{application-data-policy-subrealm-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/subrealms",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									]
								},
								"description": "Creates a new sub-realm."
							},
							"response": []
						},
						{
							"name": "CreateFunctionWithinSubRealm - Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set function GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"function-subrealm-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-function-subrealm-pagination\",\n    \"description\": \"test-function description subrealm\",\n    \"applicationId\": \"{{application-subrealm-guid}}\",\n    \"permissions\": [\"{{permission-subrealm-guid}}\"],\n    \"subRealmId\": \"{{sub-realm-guid}}\"\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/functions",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									]
								},
								"description": "Creates a new function within a given sub-realm."
							},
							"response": []
						},
						{
							"name": "CreateRoleWithinSubRealm - Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5992873-e926-4977-bbdf-5bcdc932fb4d",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"role-subrealm-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-role-new-subrealmed-pagination\",\n    \"description\": \"Test new role description\",\n    \"functionIds\": [\"{{function-subrealm-guid}}\"],\n    \"subRealmId\": \"{{sub-realm-guid}}\",\n    \"roleIds\": []\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Creates a new role within a given sub-realm."
							},
							"response": []
						},
						{
							"name": "CreateTeamWithinSubRealm - Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "107896b8-e3c5-40b7-a0d7-13e2c7b8ee3c",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set profile GUID environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.environment.set(\"team-subrealm-guid\", jsonData.uuid);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"test-team-new-subrealm-pagination\",\n    \"description\": \"test new team description - subrealmed\",\n    \"subRealmId\": \"{{sub-realm-guid}}\",\n    \"teamIds\": [],\n    \"dataPolicyIds\": [\"{{application-data-policy-subrealm-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/teams",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									]
								},
								"description": "Creates a new team within a given sub-realm."
							},
							"response": []
						},
						{
							"name": "CreateUserProfile for pagination tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17701951-d606-4279-9b65-a0c54763335f",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that user-profile is correctly structured.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('uuid');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"    pm.expect(jsonData).to.have.property('subRealmId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"New User Profile Name two\",\n\t\"description\": \"New User Profile description two\",\n\t\"subRealmId\": \"{{sub-realm-guid}}\",\n\t\"roleIds\": [\"{{role-subrealm-guid}}\"],\n\t\"teamIds\": [\"{{team-subrealm-guid}}\"]\n}"
								},
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									]
								},
								"description": "Creates a new user profile."
							},
							"response": []
						}
					],
					"description": "Creates new sub realms and user profiles for use in pagination related tests that require multiple records.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8aefac35-edf4-4268-a514-ee81db9da50a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef7835bf-d64e-4c9a-8e48-32c718ed828b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "All the requests pertaining to user profiles.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "561a9ede-c544-4bcd-a451-91a45b162dc7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "635dc055-7718-4c2b-8ed2-d9382cce7c37",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Pagination, Filtering and Ordering Lists",
			"item": [
				{
					"name": "Access Token - Admin User",
					"item": [
						{
							"name": "Get Access Token - A3S Admin - Password Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c5b79eb-dff1-4dee-bfda-9da489ae5edb",
										"exec": [
											"pm.test(\"Set session_access_token environment variable.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('access_token');",
											"    pm.environment.set(\"session_access_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "a3s-admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password1#",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client-id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client-secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "a3s",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{auth-server-base-url}}/connect/token",
									"host": [
										"{{auth-server-base-url}}"
									],
									"path": [
										"connect",
										"token"
									]
								},
								"description": "Obtains an access token from the API using the 'password' grant type. The default user credentials that populate the body of this request are those of the 'bootstrap-admin' user, which is designed to be used purely as a user for applying the initial security contract within the 'SecurityContracts' folder. The user's created when the security contract is applied have been created to have the same credentials, except their usernames, so this request body can easily be updated to fetch tokens for any of the users that are created when the security contract is applied."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c083bf4-2970-4ebe-9c68-2e16c7e0c2db",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8609d52e-7b3b-4a03-8b31-bc555701323a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clients",
					"item": [
						{
							"name": "GetClients - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 5 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									]
								},
								"description": "Gets a paginated list of clients from the API, where all the pagination related query params are at their default values."
							},
							"response": []
						},
						{
							"name": "GetClients  - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"",
											"pm.test(\"Check that there is only 1 client in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(5);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=5&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?size=1&page=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the page and page size are set to 1."
							},
							"response": []
						},
						{
							"name": "GetClients - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"",
											"pm.test(\"Check that there is only 1 client in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(5);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=5&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the page is 2 and the page size is 1."
							},
							"response": []
						},
						{
							"name": "GetClients - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"",
											"pm.test(\"Check that there are only 2 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(3);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=3&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the page is 2 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetClients - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there is only 1 client in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(3);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2\");",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=3&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the page is 3 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetClients - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Test security contract client\")",
											"",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there are 5 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the result set is ordered by the name of the client in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetClients - orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Bread Knife\")",
											"",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there are 5 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the result set is ordered by the name of the client in a descending order."
							},
							"response": []
						},
						{
							"name": "GetClients - orderBy clientId_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that the element with the largest ID is first.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].clientId).to.eql(\"test-security-contract-api\")",
											"",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there are 5 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=clientId_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=clientId_desc\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?orderBy=clientId_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "clientId_desc"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the result set is ordered by the clientId of the client in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetClients - orderBy clientId_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest client ID is first.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].clientId).to.eql(\"a3s-default\")",
											"",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there are 5 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(5);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=clientId\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=clientId\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?orderBy=clientId",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "clientId"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the result set is ordered by the clientId of the client in a descending order."
							},
							"response": []
						},
						{
							"name": "GetClients - Filter By ClientID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that the element is the corrrect one.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].clientId).to.eql(\"a3s-default\")",
											"",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there are 1 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterClientId=a3s-default\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterClientId=a3s-default\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?filterClientId=a3s-default",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "filterClientId",
											"value": "a3s-default"
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the result set is filtered by the name of a specific client."
							},
							"response": []
						},
						{
							"name": "GetClients - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that clients are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('clientId');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('allowedGrantTypes');",
											"    pm.expect(jsonData[0]).to.have.property('redirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedCorsOrigins');",
											"    pm.expect(jsonData[0]).to.have.property('postLogoutRedirectUris');",
											"    pm.expect(jsonData[0]).to.have.property('allowedScopes');",
											"    pm.expect(jsonData[0]).to.have.property('allowedOfflineAccess');",
											"});",
											"",
											"pm.test(\"Check that the element is the corrrect one.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Default A3S client.\")",
											"",
											"});",
											"",
											"// Even though the page size is 2, there are only 5 records, so the last page should have 1 result.",
											"pm.test(\"Check that there are 1 clients in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/clients\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterName=Default%20A3S%20client.\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterName=Default%20A3S%20client.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/clients?filterName=Default A3S client.",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "filterName",
											"value": "Default A3S client."
										}
									]
								},
								"description": "Gets a paginated list of clients from the API, where the result set is filtered by the clientId of a specific client."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test client lists pagination, filtering and ordering.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Application Functions",
					"item": [
						{
							"name": "GetApplicationFunctions - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 application functions in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check no relations are populated.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"    pm.expect(jsonData[0].permissions.length).to.eql(0);",
											"    ",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									]
								},
								"description": "Gets a paginated list of application functions from the API, where all the pagination related query params are at their default values."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - Include Relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 application functions in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check relations are populated.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"    pm.expect(jsonData[0].permissions.length).not.eql(0);",
											"    ",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?includeRelations=true",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "includeRelations",
											"value": "true"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the include relations query param is set to true, resulting in all related entities being populated in the retured result set."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions  - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(16);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=16&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the page and page size is set to 1."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(16);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=16&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the page is 2 and the page size is 1."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that there are only 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(8);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=8&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the page is 2 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(8);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=4&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=8&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the page is 3 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(8);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(8);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=7&size=2\");",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=8&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?size=2&page=8",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "8"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the last page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s.applicationFunctions\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&orderBy=name\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the result set is ordered by the name of the application functions in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker.crumbs\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(16);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/ApplicationFunctions?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"ApplicationFunctions"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the result set is ordered by the name of the application functions in a descending order."
							},
							"response": []
						},
						{
							"name": "GetApplicationFunctions - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"    pm.expect(jsonData[0]).to.have.property('permissions');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s.applicationFunctions\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applicationFunctions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterName=a3s.applicationFunctions\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterName=a3s.applicationFunctions\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applicationFunctions?filterName=a3s.applicationFunctions",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applicationFunctions"
									],
									"query": [
										{
											"key": "filterName",
											"value": "a3s.applicationFunctions"
										}
									]
								},
								"description": "Gets a paginated list of application functions from the API, where the result set is filtered by a specific name of the application function."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test application function lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Permissions",
					"item": [
						{
							"name": "GetPermissions - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(4);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=4&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the pagination related query params are all at their default values."
							},
							"response": []
						},
						{
							"name": "GetPermissions  - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(40);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=40&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the page and page size are set to 1."
							},
							"response": []
						},
						{
							"name": "GetPermissions - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(40);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=40&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the page is set to 2 and page size is set to 1."
							},
							"response": []
						},
						{
							"name": "GetPermissions - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are only 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(20);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=20&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the page and apge sizes are both 2."
							},
							"response": []
						},
						{
							"name": "GetPermissions - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(20);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=4&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=20&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the page is 3 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetPermissions - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(20);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(20);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=19&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=20&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?size=2&page=20",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "20"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the last page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetPermissions -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s-pipeline-test.test.archive\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(4);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&orderBy=name\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=4&size=10&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the result set is ordered by the name of the permissions in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetPermissions - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker.crumbs.update\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(40);",
											"    pm.expect(jsonData.total).to.eql(4);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=4&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the result set is ordered by the name of the permissions in a descending order."
							},
							"response": []
						},
						{
							"name": "GetPermissions - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s.securityContracts.update\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/permissions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterName=a3s.securityContracts.update\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterName=a3s.securityContracts.update\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/permissions?filterName=a3s.securityContracts.update",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "filterName",
											"value": "a3s.securityContracts.update"
										}
									]
								},
								"description": "Gets a paginated list of permissions from the API, where the result set it filtered by a specific permission name."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test permissions lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Roles",
					"item": [
						{
							"name": "GetRoles - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that there are no populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].functionIds.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									]
								},
								"description": "Gets a paginated list of roles from the API, where all pagination related query params are at their default value."
							},
							"response": []
						},
						{
							"name": "GetRoles - Include Relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that there are populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].functionIds.length).not.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true&orderBy=name\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?includeRelations=true&orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "includeRelations",
											"value": "true"
										},
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the include relations query param is set to true, resulting in all related entities being populated within the result set."
							},
							"response": []
						},
						{
							"name": "GetRoles - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(12);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=12&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the page and page size are both set to 1."
							},
							"response": []
						},
						{
							"name": "GetRoles - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(12);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=12&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the page is 2 and the page size is 1."
							},
							"response": []
						},
						{
							"name": "GetRoles - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are only 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the page and page size are 2."
							},
							"response": []
						},
						{
							"name": "GetRoles - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the page is 3 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetRoles - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there is 2 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(6);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=5&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?size=2&page=6",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "6"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the last page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetRoles -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"A3S Super Admin\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the result set is orderedd by the names of the roles in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetRoles - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-role-updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the result set is orderedd by the names of the roles in a descending order."
							},
							"response": []
						},
						{
							"name": "GetRoles - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-role-updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/roles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=test-role-updated\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=test-role-updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/roles?filterName=test-role-updated",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"roles"
									],
									"query": [
										{
											"key": "filterName",
											"value": "test-role-updated"
										}
									]
								},
								"description": "Gets a paginated list of roles from the API, where the result set is filtered by a specific role name."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test roles lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Teams",
					"item": [
						{
							"name": "GetTeams - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that there are no populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[2].teamIds.length).to.equal(0);",
											"    pm.expect(jsonData[0].userIds.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									]
								},
								"description": "Gets a paginated list of teams from the API, where all the pagination query params are at their default values."
							},
							"response": []
						},
						{
							"name": "GetTeams - Include Relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that there are populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[2].teamIds.length).not.equal(0);",
											"    pm.expect(jsonData[0].userIds.length).not.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true&orderBy=name\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?includeRelations=true&orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "includeRelations",
											"value": "true"
										},
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the include relations query param is set to true, which should result in all related entities being populated in the result set."
							},
							"response": []
						},
						{
							"name": "GetTeams - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(12);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=12&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the page and page size are set to 1."
							},
							"response": []
						},
						{
							"name": "GetTeams - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(12);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=12&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the page is 2 and the page size is 1."
							},
							"response": []
						},
						{
							"name": "GetTeams - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are only 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the page and page sizes are set to 2."
							},
							"response": []
						},
						{
							"name": "GetTeams - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"    pm.expect(jsonData).to.have.property('next');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginatedd list of teams from the API, where the page is 3 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetTeams - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there is 2 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(6);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=5&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?size=2&page=6",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "6"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the last page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetTeams -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"default-team\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the result set is ordered by the name of the teams in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetTeams - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-team-updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(12);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of teams from the API, where the result set is ordered by the name of the teams in a descending order."
							},
							"response": []
						},
						{
							"name": "GetTeams - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-team-updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/teams\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=test-team-updated\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=test-team-updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/teams?filterName=test-team-updated",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "filterName",
											"value": "test-team-updated"
										}
									]
								},
								"description": "Gets a paginatedd list of teams from the API, where the result set is filtered on a specific team name."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test teams lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Functions",
					"item": [
						{
							"name": "GetFunctions - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 8 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(8);",
											"});",
											"",
											"pm.test(\"Check that there are no populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[2].permissions.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									]
								},
								"description": "Gets a paginated list of functions from the API, with all pagination query params at the default values."
							},
							"response": []
						},
						{
							"name": "GetFunctions - Include Relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 8 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(8);",
											"});",
											"",
											"pm.test(\"Check that there are populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].permissions.length).not.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true&orderBy=name\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?includeRelations=true&orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "includeRelations",
											"value": "true"
										},
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of functions from the API, where the include relations query param is set to true, resulting in related entities being populated in the response."
							},
							"response": []
						},
						{
							"name": "GetFunctions - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(8);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=8&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of functions from the API, where the page and page size of the result set are both 1."
							},
							"response": []
						},
						{
							"name": "GetFunctions - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(8);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=8&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of functions from the API, where the selected page is 2 and the page size is 1."
							},
							"response": []
						},
						{
							"name": "GetFunctions - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are only 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(4);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated dlist of functions from the API, where the page and page size are both 2."
							},
							"response": []
						},
						{
							"name": "GetFunctions - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(4);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginatedd list of functions from the API, where the page is 3 and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetFunctions - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(4);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(4);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=3&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?size=2&page=4",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "4"
										}
									]
								},
								"description": "Gets a paginated list of functions from the API, where the last page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetFunctions -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 8 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(8);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s.SuperAdmin\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of functions from the API, where the result set is ordered by the name of the functions in a descending order."
							},
							"response": []
						},
						{
							"name": "GetFunctions - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 8 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(8);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-function-subrealm-pagination\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(8);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of functions from the API, where the result set is ordered by the name of the functions in a descending order."
							},
							"response": []
						},
						{
							"name": "GetFunctions - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('description');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker.baker\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/functions\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=breadmaker.baker\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=breadmaker.baker\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/functions?filterName=breadmaker.baker",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"functions"
									],
									"query": [
										{
											"key": "filterName",
											"value": "breadmaker.baker"
										}
									]
								},
								"description": "Gets a paginated list of applications from the API, where the result set is filtered by the name of a function."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test functions lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Applications",
					"item": [
						{
							"name": "GetApplications - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 3 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									]
								},
								"description": "Gets a paginated list of applications from the API, with the query params all set to their defaults."
							},
							"response": []
						},
						{
							"name": "GetApplications - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(3);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=3&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of applications from the API, where the page and page size are set to 1."
							},
							"response": []
						},
						{
							"name": "GetApplications - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(3);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=3&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of applications from the API, where the page is 2 and the page size is 1."
							},
							"response": []
						},
						{
							"name": "GetApplications - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of applications from the API, where the page and page sizes are both 2."
							},
							"response": []
						},
						{
							"name": "GetApplications - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of applications from the API, where page size is 2 and the last page is selected."
							},
							"response": []
						},
						{
							"name": "GetApplications -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 3 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated dlist of applications from the API, ordered by the names of the applications in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetApplications - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 3 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(3);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated dlist of applications from the API, ordered by the names of the applications in a descending order."
							},
							"response": []
						},
						{
							"name": "GetApplications - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"a3s\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/applications\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterName=a3s\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterName=a3s\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/applications?filterName=a3s",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"applications"
									],
									"query": [
										{
											"key": "filterName",
											"value": "a3s"
										}
									]
								},
								"description": "Gets a paginated list of applications from the API, where the result set has been filtered by an application name."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test application lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "LDAP Auth Modes",
					"item": [
						{
							"name": "GetLDAPAuthModes - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									]
								},
								"description": "Gets a paginated list of LDAP auth modes from the API, with all the pagination query params set to their defaults."
							},
							"response": []
						},
						{
							"name": "GetLDAPAuthModes - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginatdd list of LDAP auth modes from the API, where the page and page size are set to 1."
							},
							"response": []
						},
						{
							"name": "GetLDAPAuthModes - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1\");",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginatdd list of LDAP auth modes from the API, where the page is set to 1 and page size is set to 1."
							},
							"response": []
						},
						{
							"name": "GetLDAPAuthModes- size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap?size=2&page=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginatdd list of LDAP auth modes from the API, where the page is the last page, and page size is set to 1."
							},
							"response": []
						},
						{
							"name": "GetLDAPAuthModes -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 3 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"open-ldap-dev\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of LDAP auth modes from the API, where the result set is ordered by the names of the LDAP auth modes in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetLDAPAuthModes - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"open-ldap-dev-updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of LDAP auth modes from the API, where the result set is ordered by the names of the LDAP auth modes in a descending order."
							},
							"response": []
						},
						{
							"name": "GetLDAPAuthModes - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"open-ldap-dev-updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/authenticationModes/ldap\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterName=open-ldap-dev-updated\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterName=open-ldap-dev-updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/authenticationModes/ldap?filterName=open-ldap-dev-updated",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"authenticationModes",
										"ldap"
									],
									"query": [
										{
											"key": "filterName",
											"value": "open-ldap-dev-updated"
										}
									]
								},
								"description": "Gets a paginated list of LDAP auth modes from the API, where the result set is filtered by the name of a specific LDAP auth mode."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test LDAP auth mode lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "GetUsers - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are no populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[2].roles.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Gets a paginated list of users from the API, with all the pagination related query params set to the default."
							},
							"response": []
						},
						{
							"name": "GetUsers - Include Relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are populated related fields in returned data.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].roles.length).not.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=true&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true&orderBy=name\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?includeRelations=true&orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "includeRelations",
											"value": "true"
										},
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, with the include relations flag set to true, which should result in related entities being populated in the response."
							},
							"response": []
						},
						{
							"name": "GetUsers - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(11);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=11&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of userrs from the API, with the page and the size of the page being set to 1."
							},
							"response": []
						},
						{
							"name": "GetUsers - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(11);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=11&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, with the page number being 2, and the size of the page being set to 1."
							},
							"response": []
						},
						{
							"name": "GetUsers - page is 2 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are only 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=3&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?size=2&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where both the page and the page size are set to 2."
							},
							"response": []
						},
						{
							"name": "GetUsers - page is 3 and pageSize set to 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(3);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=2&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=4&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?size=2&page=3",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where the 3rd page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetUsers - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there is 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(6);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(6);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=5&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=6&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?size=2&page=6",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "6"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where the last page is selected and the page size is 2."
							},
							"response": []
						},
						{
							"name": "GetUsers -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Bootstrap\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where the result set is ordered by the name of the users in ascending order."
							},
							"response": []
						},
						{
							"name": "GetUsers - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are 10 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(10);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker-admin\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(11);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where the result set is ordered by the name of the users in descending order."
							},
							"response": []
						},
						{
							"name": "GetUsers - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker-admin\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=breadmaker-admin\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=breadmaker-admin\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?filterName=breadmaker-admin",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filterName",
											"value": "breadmaker-admin"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where the result set is filteredd on the name of a specific user."
							},
							"response": []
						},
						{
							"name": "GetUsers - Filter By Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"    pm.expect(jsonData[0]).to.have.property('username');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"breadmaker-admin\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/users\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterUsername=breadmaker-admin\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterUsername=breadmaker-admin\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users?filterUsername=breadmaker-admin",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filterUsername",
											"value": "breadmaker-admin"
										}
									]
								},
								"description": "Gets a paginated list of users from the API, where the result set is filtered using the username of a specific user."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test user lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SubRealms",
					"item": [
						{
							"name": "GetSubRealms - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									]
								},
								"description": "Gets a paginated list of subrealms from the API, with no additional filters."
							},
							"response": []
						},
						{
							"name": "GetSubRealms - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of subrealms from the API, with page number and size set to 1."
							},
							"response": []
						},
						{
							"name": "GetSubRealms - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1\");",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=1\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of sub-realms from the API, with the page number set to 2, and the page size set to 1."
							},
							"response": []
						},
						{
							"name": "GetSubRealms- size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=2\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms?size=2&page=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of sub-realms from the API, with the last page in the paginated result being selected."
							},
							"response": []
						},
						{
							"name": "GetSubRealms -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 3 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-sub-realm-new\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of sub-realms from the API, where the rersults are ordered by the name of the sub-realm in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetSubRealms - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-sub-realm-new-pagination\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of sub-realms from the API, where the results are ordered by the name of the sub-realm in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetSubRealms - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"test-sub-realm-new-pagination\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var baseUrl = currentHost + \"/subrealms\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&filterName=test-sub-realm-new-pagination\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&filterName=test-sub-realm-new-pagination\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/subrealms?filterName=test-sub-realm-new-pagination",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"subrealms"
									],
									"query": [
										{
											"key": "filterName",
											"value": "test-sub-realm-new-pagination"
										}
									]
								},
								"description": "Gets a paginated list of sub-realms from the API, where the results are filtered by a given sub-realm name."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test Sub-Realm lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Profiles",
					"item": [
						{
							"name": "GetUserProfiles - No additional params",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that there are no populated related entities.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].roles.length).to.equal(0);",
											"    pm.expect(jsonData[0].teams.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									]
								},
								"description": "Gets a paginated list of User Profiles from the API. Contains no additional parameters, which defaults to include relations to be false."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles - Include Relations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse (default page size).\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that there are populated related entities.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].roles.length).not.equal(0);",
											"    pm.expect(jsonData[0].teams.length).not.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=true\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?includeRelations=true",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "includeRelations",
											"value": "true"
										}
									]
								},
								"description": "Gets a paginated list of user profiles from the API. The includeRelations flag is set to true, so related entities should be populated."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles - page and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('next');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('current');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?page=1&size=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of user profiles from the API, with page number and size set to 1."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles - page is 2 and pageSize set to 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that there is only 1 element in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are no populated related entities.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].roles.length).to.equal(0);",
											"    pm.expect(jsonData[0].teams.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"    pm.expect(jsonData).to.have.property('prev');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(2);",
											"    pm.expect(jsonData.size).to.eql(1);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(2);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=2&size=1&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=1&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?size=1&page=2",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "size",
											"value": "1"
										},
										{
											"key": "page",
											"value": "2"
										}
									]
								},
								"description": "Gets a paginated list of user profiles from the API, with page number being 2 and the page size being 1."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles - size is 2 page is last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that there are no populated related entities.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData[0].roles.length).to.equal(0);",
											"    pm.expect(jsonData[0].teams.length).to.equal(0);",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(2);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=2&includeRelations=false\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?size=2&page=1",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								},
								"description": "Gets a paginated list of profiles from the API, with the last page being selected from the pagination options."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles -  orderBy name_asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 3 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that the element with the smallest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"New User Profile Name two\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?orderBy=name",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name"
										}
									]
								},
								"description": "Gets a paginated list of user profiles from the API, which are ordered by the name of the user profile in an ascending order."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles - orderBy name_desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 2 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(2);",
											"});",
											"",
											"pm.test(\"Check that the element with the largest name is first\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"User Profile Name - Updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(2);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&orderBy=name_desc\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?orderBy=name_desc",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "name_desc"
										}
									]
								},
								"description": "Gets a paginated list of user profiles from the API, ordered by the name of the user profiles, in a descending order."
							},
							"response": []
						},
						{
							"name": "GetUserProfiles - Filter By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05414abe-5da8-4d3f-8652-5ebf5816e659",
										"exec": [
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check that elements are correctly structured in the first element of the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.have.property('uuid');",
											"    pm.expect(jsonData[0]).to.have.property('name');",
											"});",
											"",
											"pm.test(\"Check that there are 1 elements in the repsonse.\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Check that the element is the correct one\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"User Profile Name - Updated\")",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is present.\", function () {",
											"    pm.response.to.have.header(\"X-Pagination\");",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header is correctly formed.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData).to.have.property('count');",
											"    pm.expect(jsonData).to.have.property('first');",
											"    pm.expect(jsonData).to.have.property('last');",
											"});",
											"",
											"pm.test(\"Check that 'X-Pagination' header has correct values.\", function () {",
											"    paginationHeader = pm.response.headers.get(\"X-Pagination\");",
											"    var jsonData = JSON.parse(paginationHeader);",
											"    ",
											"    pm.expect(jsonData.current).to.eql(1);",
											"    pm.expect(jsonData.size).to.eql(10);",
											"    pm.expect(jsonData.count).to.eql(1);",
											"    pm.expect(jsonData.total).to.eql(1);",
											"    // Check the values of the pagination links.",
											"    var currentHost = pm.environment.get(\"a3s-host\");",
											"    var currentUserGuid = pm.environment.get(\"user-guid\");",
											"    var baseUrl = currentHost + \"/users/\" + currentUserGuid + \"/profiles\"",
											"    ",
											"    pm.expect(jsonData.prev).to.eql(undefined);",
											"    pm.expect(jsonData.next).to.eql(undefined);",
											"    pm.expect(jsonData.last).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=User%20Profile%20Name%20-%20Updated\");",
											"    pm.expect(jsonData.first).to.eql(baseUrl + \"?page=1&size=10&includeRelations=false&filterName=User%20Profile%20Name%20-%20Updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{session_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{a3s-host}}/users/{{user-guid}}/profiles?filterName=User Profile Name - Updated",
									"host": [
										"{{a3s-host}}"
									],
									"path": [
										"users",
										"{{user-guid}}",
										"profiles"
									],
									"query": [
										{
											"key": "filterName",
											"value": "User Profile Name - Updated"
										}
									]
								},
								"description": "Gets a list of paginated user profiles from the API, filtered by a particular user profile name."
							},
							"response": []
						}
					],
					"description": "Folder containing all the requests used to test User Profile lists pagination, filtering and ordering.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9900467d-7937-4e31-a41b-47280c69d6bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1758bc5-6ada-4cd8-ab53-f2a2b2af13b5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Contains pagination, filtering and ordering related tests for all the entities that expose APIs wherre lists can be obtained.",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2694b9d6-e932-4ee5-aa5e-b3976eb72769",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e951f91d-27f9-4c5a-bd38-7a25a47ad295",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}